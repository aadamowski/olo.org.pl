{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/blog/dynamic-component-yearssince","result":{"data":{"post":{"id":"f45780ec-4ceb-582f-a9fa-a9c03f034a5e","title":"Dynamic rehydrated components in GatsbyJS","date":"January 23, 2021","excerpt":"As I mentioned in the  ,\nthis website is based on the GatsbyJS static website generation framework. Itself based on  React , it gave me the…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Dynamic rehydrated components in GatsbyJS\",\n  \"date\": \"2021-01-23T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"As I mentioned in the \", mdx(Navlink, {\n    to: \"/blog/new-website\",\n    text: \"previous blog post\",\n    mdxType: \"Navlink\"\n  }), \",\\nthis website is based on the GatsbyJS static website generation framework.\"), mdx(\"p\", null, \"Itself based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org\"\n  }), \"React\"), \", it gave me the opportunity to look at\\nthe technology built and promoted by my employer (Facebook) in a new light.\"), mdx(\"p\", null, \"It\\u2019s one thing to occasionally work on the presentation layer of internal Facebook\\nservices, spending most of that time modifying parts of larger systems already built\\nby hundreds of other fellow engineers, and completely another thing to build a new\\nuser interface that\\u2019s a complete, self-contained website, from scratch.\"), mdx(\"p\", null, \"I learned to appreciate the ability to semantically define certain elements\\nto express page structure in more meaningful terms than raw HTML elements like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"H1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"P\"), \",\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DIV\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SPAN\"), \". This gives me some strong \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.w3.org/standards/semanticweb/\"\n  }), \"semantic web\"), \"\\nvibes (for those who still remember that concept) - but with just the really useful parts\\n(semantic model of the document for my own internal consumption and understanding) without\\nthe parts that made the concept unworkable (the complexity of cross-system integration).\"), mdx(\"p\", null, \"One of the cool things that are possible thanks to basing my website on GatsbyJS is\\nthe ability to support dynamic \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org\"\n  }), \"React\"), \" content thanks to\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.com/docs/conceptual/react-hydration/\"\n  }), \"hydration\"), \".\"), mdx(\"p\", null, \"One place where I take advantage of that is my \", mdx(Navlink, {\n    to: \"/resume\",\n    text: \"resume\",\n    mdxType: \"Navlink\"\n  }), \" page:\\nthe latest listed position I held has a dynamically calculated duration, expressed in years.\"), mdx(\"p\", null, \"Currently, it shows that I have worked as a Production Engineer at Facebook\\nfor \", mdx(YearsSince, {\n    startDate: \"2016-03-01T09:00:00-07:00\",\n    mdxType: \"YearsSince\"\n  }), \" years, but on the next\\nMarch 1st at 9:00 Pacific Time it will automatically flip\\nto \", mdx(YearsSince, {\n    startDate: \"2015-03-01T09:00:00-07:00\",\n    mdxType: \"YearsSince\"\n  }), \" years - without you\\nhaving to reload the web page. If you have the patience, feel free to verify that\\nby visiting my page on the relevant date!\"), mdx(\"p\", null, \"This is a small, barely noticeable gimmick, but it was fun to implement\\nand has been a nice learning experience.\"), mdx(\"p\", null, \"The implementation is pretty straightforward: first, I created a React component that\\nI named \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aadamowski/olo.org.pl-src/blob/main/src/components/yearssince.js\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"yearssince\")), \".\"), mdx(\"p\", null, \"It tracks its internal state in two regular JavaScript \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Date\"), \" objects - the start date and the current date timestamp.\"), mdx(\"p\", null, \"Then it sets up a timer with an interval of one second that changes the\\ninternal state by replacing the current date with a fresh one.\"), mdx(\"p\", null, \"At rendering phase, it uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"moment\"), \" JS library (a base dependency of Gatsby)\\nto calculate a timezone and Gregorian calendar-conscious difference in years\\nbetween the start date and the present.\"), mdx(\"p\", null, \"When \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/aadamowski/olo.org.pl-src/blob/a7555fa60338ee861cc802e08da87869bc99bb68/src/pages/resume.js#L75\"\n  }), \"embedded\"), \"\\nin a page, Gatsby automatically hydrates this component - so even when all of the content\\nof the website gets pre-rendered on build time, the particular elements generated\\nby this component will keep getting updated by React DOM server automatically\\nwithin the web browser.\"), mdx(\"p\", null, \"The result is a counter of elapsed years that is always right.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Aleksander Adamowski - Blog"}}},"pageContext":{"id":"f45780ec-4ceb-582f-a9fa-a9c03f034a5e","excerpt":"As I mentioned in the  ,\nthis website is based on the GatsbyJS static website generation framework. Itself based on  React , it gave me the…","slug":"/blog/dynamic-component-yearssince","title":"Dynamic rehydrated components in GatsbyJS","date":"January 23, 2021","siteTitle":"Aleksander Adamowski - Blog","socialLinks":[{"name":"github","url":"https://github.com/aadamowski"},{"name":"facebook","url":"https://www.facebook.com/olo"},{"name":"instagram","url":"https://www.instagram.com/aadamowski/"},{"name":"linkedin","url":"https://www.linkedin.com/in/aleksanderadamowski/"}],"previous":{"node":{"id":"78437fbd-fd7a-52eb-ba3f-0e55c97f57d3","excerpt":"So, after a few years of my website being down because of my free\n OpenShift  container expiring, I finally\ngot to getting it back up as a…","slug":"/blog/new-website","title":"New website","date":"January 18, 2021"}},"next":null}},"staticQueryHashes":["386998304","63159454"]}