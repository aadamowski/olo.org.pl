{"componentChunkName":"component---src-gatsby-theme-notes-templates-note-js","path":"/notes/linux_stuff/useful_scripts","result":{"data":{"note":{"id":"f4148686-b92b-5980-b3b8-ee7d7267bdd6","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Helmet, {\n    title: \"Aleksander Adamowski - Useful Scripts\",\n    mdxType: \"Helmet\"\n  }), mdx(\"span\", null, mdx(Toc, {\n    tableOfContents: props.tableOfContents,\n    mdxType: \"Toc\"\n  })), mdx(\"h1\", {\n    \"id\": \"posix-systems\"\n  }, \"POSIX systems\"), mdx(\"p\", null, \"Scripts in bourne shell/bash, Python, Perl etc.\"), mdx(\"p\", null, \"Obviously, some may work on non-POSIX systems but it\\u2019s not guaranteed.\"), mdx(\"h2\", {\n    \"id\": \"bash-aliases\"\n  }, \"Bash aliases\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"alias mkdir_curdate='mkdir $(date +%F)'\\nalias mkdir_cd_curdate='mkdir $(date +%F); cd $_'\\nalias cd_curdate='cd $(date +%F)'\\nalias mkdir_curdate_time='mkdir -p $(date +%F)/$(date +%H_%M_%S)'\\nalias mkdir_cd_curdate_time='mkdir -p $(date +%F)/$(date +%H_%M_%S); cd $_'\\nalias cd_curdate_time='cd $(date +%F)'\\nalias mkdir_curtimestamp='mkdir $(date +%F_%H_%M_%S)'\\nalias mkdir_cd_curtimestamp='mkdir $(date +%F_%H_%M_%S); cd $_'\\n\")), mdx(\"h2\", {\n    \"id\": \"epoch-timestamp-to-current-date\"\n  }, \"Epoch timestamp to current date\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"date -d \\\"@$1\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"exposing-shells-on-the-network\"\n  }, \"Exposing shells on the network\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"socat tcp-l:3333 exec:/bin/sh  <-- on the remote side\\nsocat tcp:localhost:3333 stdout\\nncat bmcaddr 3333\\n\")), mdx(\"p\", null, \"With full tty features:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method2usingsocat\"\n  }), \"https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/#method2usingsocat\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp6-l:1337\\n\\nsocat file:tty,raw,echo=0 tcp6-connect:<remoteaddr>:1337\\n\")), mdx(\"h2\", {\n    \"id\": \"openssl\"\n  }, \"OpenSSL\"), mdx(\"h3\", {\n    \"id\": \"ssl_check_expiry_datesh\"\n  }, \"ssl_check_expiry_date.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\necho \\\"\\\" | openssl s_client -connect \\\"$@\\\" 2>/dev/null | \\\\\\n\\xA0sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | \\\\\\n\\xA0openssl x509 -noout -enddate | perl -e '\\nuse POSIX qw(strftime);\\nuse Date::Parse;\\n$_ = <>;\\n/^notAfter=(.*)/;\\nprint strftime(\\\"%F\\\", Date::Parse::strptime($1));\\nprint \\\"\\\\n\\\";\\n';\\n\")), mdx(\"h3\", {\n    \"id\": \"tls_smtp_check_expiry_datesh\"\n  }, \"tls_smtp_check_expiry_date.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\necho \\\"\\\" | openssl s_client -starttls smtp -connect \\\"$1:25\\\" 2>/dev/null | \\\\\\n\\xA0sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | \\\\\\n\\xA0openssl x509 -noout -enddate | perl -e '\\nuse POSIX qw(strftime);\\nuse Date::Parse;\\n$_ = <>;\\n/^notAfter=(.*)/;\\nprint strftime(\\\"%F\\\", Date::Parse::strptime($1));\\nprint \\\"\\\\n\\\";\\n';\\n\")), mdx(\"h3\", {\n    \"id\": \"ssl_warn_expiry_datesh\"\n  }, \"ssl_warn_expiry_date.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nhost=\\\"$1\\\"\\necho '' | openssl s_client -connect \\\"$1\\\" 2>/dev/null | \\\\\\n\\xA0sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | \\\\\\n\\xA0openssl x509 -noout -enddate | perl -e \\\"\\nuse POSIX qw(strftime);\\nuse Date::Parse;\\n\\\\$_ = <>;\\n/^notAfter=(.*)/;\\n\\\\$expirytime=Date::Parse::str2time(\\\\$1);\\n\\\\$timediff = \\\\$expirytime - time;\\nif (\\\\$timediff < 3600*24*31) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print 'Only '.(\\\\$timediff /3600/24).' days left until SSL certificate expiry on $host';\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\\\\\"\\\\n\\\\\\\";\\n}\\n\\\";\\n\")), mdx(\"h3\", {\n    \"id\": \"use-s_client-with-sni\"\n  }, \"Use s_client with SNI\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"openssl s_client -connect host:port -servername fqdn\\n\")), mdx(\"h3\", {\n    \"id\": \"verify_aster_efakturash\"\n  }, \"verify_aster_eFaktura.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nopenssl smime -verify -inform DER -noverify -out /dev/null -in \\\"$1.sig\\\" -content \\\"$1\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"convert-x509-certificate-to-csr\"\n  }, \"Convert x.509 certificate to CSR\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"openssl x509 -x509toreq -in CERT.pem -signkey PRIVKEY.pem\\n\")), mdx(\"h3\", {\n    \"id\": \"reflow_pempl\"\n  }, \"reflow_PEM.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -p\\ns/(-----BEGIN[^-]+-----)/$1\\\\n/g;\\ns/(-----END[^-]+-----)/\\\\n$1/g;\\ns/([^\\\\n]{64})/$1\\\\n/g'\\n\")), mdx(\"p\", null, \"^ That\\u2019s for the cases wher PEM-encoded data got all its linebreaks removed and e.g. openssl tools refuse to parse it with\"), mdx(\"h3\", {\n    \"id\": \"ssl-redirectpl\"\n  }, \"ssl-redirect.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -wT\\n#############################################\\n# Przykladowe uzycie po wrzuceniu do cgi-bin:\\n# SSLRequireSSL\\n# ErrorDocument 403 /cgi-bin/ssl-redirect.pl\\n#############################################\\n\\n$redirect = $ENV{'REDIRECT_URL'};\\n$redirect =~ s/^http:/https:/;\\nif ($redirect !~ /^https:/) {\\n\\xA0 $redirect = \\\"https://$ENV{'SERVER_NAME'}\\\" . $redirect;\\n}\\n$redirect =~ s/private/private-ssl/;\\nprint \\\"Content-Type: text/html; charset=UTF-8\\\\n\\\";\\nprint \\\"Cache-Control: no-cache\\\\n\\\";\\nprint \\\"Pragma: no-cache\\\\n\\\";\\nprint \\\"Location: $redirect\\\\n\\\";\\nprint \\\"Refresh: 1; url=$redirect\\\\n\\\";\\nprint \\\"\\\\n\\\\n\\\";\\nprint <<EOD;\\n<!DOCTYPE HTML PUBLIC \\\"-//IETF//DTD HTML 2.0//EN\\\">\\n<html><head>\\n\\xA0\\xA0\\xA0 <title>403 Dost\\u0119p zabroniony</title>\\n\\xA0\\xA0\\xA0 <META http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\">\\n\\xA0\\xA0\\xA0 <META http-equiv=\\\"Cache-Control\\\" content=\\\"no-cache\\\">\\n\\xA0\\xA0\\xA0 <META http-equiv=\\\"Pragma\\\" content=\\\"no-cache\\\">\\n\\xA0\\xA0\\xA0 </head><body>\\n\\xA0\\xA0\\xA0 <h1>Dost\\u0119p zabroniony</h1>\\n\\xA0\\xA0\\xA0 <P>Ta strona wymaga po\\u0142\\u0105czenia szyfrowanego SSL.\\nEOD\\n\\xA0\\xA0\\xA0\\xA0\\xA0 print 'Oto poprawny adres: <A HREF=\\\"'.$redirect.'\\\">'.$redirect.'</A>. Powinno pod niego za chwil\\u0119 nast\\u0105pi\\u0107 przekierowanie.<hr></body></html>';\\n\")), mdx(\"h3\", {\n    \"id\": \"ssl_clientsh\"\n  }, \"ssl_client.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"openssl s_client -CApath /etc/ssl/cacerts/ -connect $@\\n\")), mdx(\"h3\", {\n    \"id\": \"tls_smtp_clientsh\"\n  }, \"tls_smtp_client.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"if [ $# -eq 1 ]; then\\n\\xA0 openssl s_client -starttls smtp -connect $@\\nelse\\n\\xA0 echo \\\"Uzycie: $0 host:port\\\"\\n\\xA0 echo \\\"n.p.:\\\"\\n\\xA0 echo \\\"$0 nmail.altkom.pl:25\\\"\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"openssl_cat_pkcs12\"\n  }, \"openssl_cat_PKCS12\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nopenssl pkcs12 -info -nodes -in \\\"$1\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"hexdump2asn1parsesh\"\n  }, \"hexdump2asn1parse.sh\"), mdx(\"p\", null, \"Read and parse a hexdump of DER-encoded ASN.1 structure:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nxxd -r -p < $1 | openssl asn1parse -inform DER\\n\")), mdx(\"h2\", {\n    \"id\": \"git\"\n  }, \"GIT\"), mdx(\"h3\", {\n    \"id\": \"git-relative-diff-alias\"\n  }, \"Git relative diff alias\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git config --global alias.d 'diff --no-prefix --relative'\\n\")), mdx(\"h3\", {\n    \"id\": \"list-branches-and-remote-upstreams-they-track\"\n  }, \"List branches and remote upstreams they track\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git for-each-ref refs/heads --format='%(refname:short) %(upstream:short)'\\n\")), mdx(\"h3\", {\n    \"id\": \"sum-blob-sizes-introduced-by-commit\"\n  }, \"Sum blob sizes introduced by commit\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\ncommitid=$1\\n(\\n        for blobid in $(\\n                git diff-tree -r -c -M -C --no-commit-id $commitid | awk '{print $4}'\\n        ); do\\n        echo $blobid | git cat-file --batch-check;\\n        done;\\n) | awk -v commitid=$commitid '\\n{\\n        s += $3\\n}\\n END {\\n        print \\\"Summary size of blobs introduced by commit \\\" commitid \\\": \\\" s \\\" bytes\\\"\\n}'\\n\")), mdx(\"h3\", {\n    \"id\": \"sort-branches-by-last-commit-timestamp\"\n  }, \"Sort branches by last commit timestamp\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git for-each-ref --sort=-committerdate refs/\\n\")), mdx(\"h2\", {\n    \"id\": \"mercurial\"\n  }, \"Mercurial\"), mdx(\"h3\", {\n    \"id\": \"hg_log_raw_messagessh\"\n  }, \"hg_log_raw_messages.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"hg log --template '{desc}\\\\n--------\\\\n' \\\"$@\\\"\\n\")), mdx(\"h3\", {\n    \"id\": \"hgd\"\n  }, \"hgd\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"alias hgd='hg diff --noprefix --root . --color always | less -r'\\n\")), mdx(\"h2\", {\n    \"id\": \"base64_decpy\"\n  }, \"base64_dec.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\n\\nimport sys\\nfor line in sys.stdin.readlines():\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print line.decode('base64')\\n\")), mdx(\"h2\", {\n    \"id\": \"base64_encpy\"\n  }, \"base64_enc.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\n\\nimport sys\\nfor line in sys.stdin.readlines():\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print line.encode('base64')\\n\")), mdx(\"h2\", {\n    \"id\": \"base64_dec\"\n  }, \"base64_dec\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\nuse MIME::Base64 ();\\nwhile (<>) { $buf.=$_};\\nprint MIME::Base64::decode($buf);\\n\")), mdx(\"h2\", {\n    \"id\": \"base64_enc\"\n  }, \"base64_enc\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\nuse MIME::Base64 ();\\nwhile (read(STDIN, $buf, 60*57)) {\\n\\xA0 print MIME::Base64::encode($buf);\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"quoted_printable_dec\"\n  }, \"quoted_printable_dec\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\nuse MIME::QuotedPrint;\\nwhile (<>) { $buf.=$_};\\nprint decode_qp($buf);\\n\")), mdx(\"h2\", {\n    \"id\": \"quoted_printable_enc\"\n  }, \"quoted_printable_enc\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\nuse MIME::QuotedPrint;\\nwhile (read(STDIN, $buf, 60*57)) {\\n\\xA0 print encode_qp($buf);\\n};\\n\")), mdx(\"h2\", {\n    \"id\": \"all_pair_combinationspy\"\n  }, \"all_pair_combinations.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport sys\\nimport itertools\\nwords=sys.stdin.readlines()\\ncombinations=itertools.combinations(words, 2)\\nfor combination in combinations:\\n        print combination[0].rstrip() + ' ' + combination[1].rstrip()\\n        print combination[1].rstrip() + ' ' + combination[0].rstrip()\\n\")), mdx(\"h2\", {\n    \"id\": \"dusage_in_curdirsh\"\n  }, \"dusage_in_curdir.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\ndu -xk --max-depth=1 . | sort -n\\n\")), mdx(\"h2\", {\n    \"id\": \"db_dumppl---dump-a-berkeley-db-database\"\n  }, \"db_dump.pl - dump a Berkeley DB database\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"use warnings;\\nuse strict;\\nuse DB_File;\\nuse Fcntl;\\n\\nmy (%db, $key, $val);\\ntie %db, 'DB_File', $ARGV[0], O_RDONLY, 0640, $DB_BTREE or die \\\"Cannot open \\\".$ARGV[0].\\\": $!\\\\n\\\";\\n# Dump the complete database\\nwhile (($key, $val) = each %db) {\\n     \\xA0 \\xA0print \\\"$key:$val\\\\n\\\";\\n}\\nuntie %db;\\n\")), mdx(\"h2\", {\n    \"id\": \"bekap\"\n  }, \"bekap\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# by OLO\\n# skrypt tworzy kopie zapasowa pliku w wydzielonym katalogu ~/bekap.\\n# kopia tworrzona jest z dopiskiem - numerem wersji pliku,\\n# tworzonym z daty i czasu wykonania (z dokladnoscia do 1 sekundy)\\n\\nif [ $# -ge 1 ]; then\\n     \\xA0 \\xA0while [ $# -ne 0 ]; do\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0if [ -e \\\"$1\\\" ]; then\\n     \\xA0curdate=$(date +%Y_%m_%d_%H=%M=%S)\\n     \\xA0basename=$(basename \\\"$1\\\")\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0cp -ai \\\"$1\\\" ~/\\\"bekap\\\"/\\\"$basename.${curdate}\\\"\\n     \\xA0bzip2 ~/\\\"bekap\\\"/\\\"$basename.${curdate}\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0else\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0echo \\\"plik $1 nie istnieje\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0fi\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0shift\\n     \\xA0 \\xA0done\\nelse\\n     \\xA0 \\xA0echo \\\"Uzycie: $0 plik_do_zachowania\\\"\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"bekap_in_place\"\n  }, \"bekap_in_place\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# by OLO\\n# skrypt tworzy kopie zapasowa pliku w katalogu biezacym.\\n# kopia tworrzona jest z dopiskiem - numerem wersji pliku,\\n# tworzonym z daty i czasu wykonania (z dokladnoscia do 1 sekundy)\\n\\nif [ $# -ge 1 ]; then\\n     \\xA0 \\xA0while [ $# -ne 0 ]; do\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0if [ -e \\\"$1\\\" ]; then\\n     \\xA0curdate=$(date +%Y_%m_%d_%H=%M=%S)\\n     \\xA0basename=$(basename \\\"$1\\\")\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0cp -ai \\\"$1\\\" \\\"$1.${curdate}\\\"\\n     \\xA0bzip2 \\\"$1.${curdate}\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0else\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0echo \\\"plik $1 nie istnieje\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0fi\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0shift\\n     \\xA0 \\xA0done\\nelse\\n     \\xA0 \\xA0echo \\\"Uzycie: $0 plik_do_zachowania\\\"\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"httrack-mirror_websitesh\"\n  }, \"httrack-mirror_website.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nhttrack \\\"$@\\\" -j -%P -w -n -b1 -%h -%k -%B -C1 -P stacja.amarczuk:8080\\n\")), mdx(\"h2\", {\n    \"id\": \"check_nippy\"\n  }, \"check_nip.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport sys\\n\\ndef check_nip(nip):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum, ct = 0, [6, 5, 7, 2, 3, 4, 5, 6, 7]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 for i in range(9):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (int(nip[i]) * ct[i])\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return ((sum%11) == int(nip[9]))\\n\\nline = sys.stdin.readline()\\nif check_nip(line):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"NIP poprawny\\\"\\nelse:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"NIP NIEPOPRAWNY!\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"generate_nippy\"\n  }, \"generate_nip.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport random\\n\\nnip = []\\nsum, ct = 0, [6, 5, 7, 2, 3, 4, 5, 6, 7]\\nrandom.seed()\\nfor i in range(9):\\n  digit = random.randint(0, 9)\\n  nip.append(`digit`)\\n  sum += (digit * ct[i])\\ncheckDigit = sum % 11\\nnip.append(`checkDigit`)\\nprint ''.join(nip)\\n\")), mdx(\"h2\", {\n    \"id\": \"check_nrbpy\"\n  }, \"check_nrb.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport sys\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"def iban_letter2num(letter):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return str(ord(letter) - ord('A') + 10)\\n\\nnum = sys.stdin.readline().strip().replace(' ', '')\\nif len(num) == 26:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 num = 'PL'+num\\nif len(num) != 28:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"Nieprawidlowa dlugosc numeru - powinno byc 28 znakow razem z kodem kraju, jest %d\\\" % len(num)\\nelse:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print num\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 num = num[4:] + iban_letter2num(num[0]) + iban_letter2num(num[1]) + num[2:4]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 n = int(num)\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 if n % 97 == 1:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"ok\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 else:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"zla suma kontrolna\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"check_peselpy\"\n  }, \"check_pesel.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport sys\\n\\ndef check_pesel(pesel):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum, ct = 0, [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 for i in range(11):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (int(pesel[i]) * ct[i])\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return (str(sum)[-1] == '0')\\n\\nline = sys.stdin.readline()\\nif check_pesel(line):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"PESEL poprawny\\\"\\nelse:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"PESEL NIEPOPRAWNY!\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"generate_peselpy\"\n  }, \"generate_pesel.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport random\\n\\ndef gen_pesel():\\n\\xA0 \\xA0 \\xA0 \\xA0 random.seed()\\n\\xA0 \\xA0 \\xA0 \\xA0 year = \\\"%02d\\\" % random.randint(10, 90)\\n\\xA0 \\xA0 \\xA0 \\xA0 month = \\\"%02d\\\" % random.randint(1, 12)\\n\\xA0 \\xA0 \\xA0 \\xA0 day = \\\"%02d\\\" % random.randint(1, 28)\\n\\xA0 \\xA0 \\xA0 \\xA0 sequencenumber = \\\"%03d\\\" % random.randint(1, 999)\\n\\xA0 \\xA0 \\xA0 \\xA0 sexdigit = \\\"%1d\\\" % random.randint(0, 9)\\n\\xA0 \\xA0 \\xA0 \\xA0 mainpart = year + month + day + sequencenumber + sexdigit\\n\\xA0 \\xA0 \\xA0 \\xA0 sum, ct = 0, [1, 3, 7, 9, 1, 3, 7, 9, 1, 3, 1]\\n\\xA0 \\xA0 \\xA0 \\xA0 for i in range(10):\\n\\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 sum += (int(mainpart[i]) * ct[i])\\n\\xA0 \\xA0 \\xA0 \\xA0 remainder = sum % 10\\n\\xA0 \\xA0 \\xA0 \\xA0 controlcode = (10 - remainder) % 10\\n        return mainpart + (\\\"%1d\\\" % controlcode) + \\\" , sexdigit: \\\" + sexdigit + \\\\\\n                (\\\" (kobieta)\\\" if int(sexdigit) % 2 == 0 else \\\" (mezczyzna)\\\")\\n\\nprint gen_pesel()\\n\")), mdx(\"h2\", {\n    \"id\": \"check_regonpy\"\n  }, \"check_regon.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport sys\\n\\ndef check_regon(regon):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum = 0\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 w = [8, 9, 2, 3, 4, 5, 6, 7]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 if len(regon) == 7:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 w = w[2:]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 elif len(regon) == 14:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 # ciezko znalezc algorytm (wagi) do sprawdzenia ostatnich\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 # pieciu cyfr, wiec olewamy\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 regon = regon[:9]\\n\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 ct = int(regon[-1])\\n\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 for i in range(len(w)):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sum += (int(regon[i]) * w[i])\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 mod = sum%11\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 if (mod == ct) or (mod == 10 and ct == 0):\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return True\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return False\\n\\nline = sys.stdin.readline().strip()\\nif check_regon(line):\\n\\xA0 print \\\"REGON poprawny\\\"\\nelse:\\n\\xA0 print \\\"REGON NIEPOPRAWNY!\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"luhncalculatorpy\"\n  }, \"luhnCalculator.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\n# From http://www.xinotes.org/notes/note/596/\\nimport sys\\nimport re\\n\\ndef doLuhn(s, evenPos):\\n    s = str(s)\\n    sum = 0\\n    for d in reversed(s):\\n     \\xA0 \\xA0d = int(d)\\n     \\xA0 \\xA0assert 0 <= d <= 9\\n     \\xA0 \\xA0if evenPos:\\n     \\xA0 \\xA0 \\xA0 \\xA0d *= 2\\n     \\xA0 \\xA0 \\xA0 \\xA0if d > 9:\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0d = (d % 10) + 1\\n     \\xA0 \\xA0sum += d\\n     \\xA0 \\xA0evenPos = not evenPos\\n    return sum\\n\\ndef luhnValidation(n):\\n    return doLuhn(n, False) % 10 == 0\\n\\ndef generateCheckDigit(n):\\n    return (10 - (doLuhn(n, True) % 10)) % 10\\n\\nwhile 1:\\n    line = sys.stdin.readline()\\n    if not line: break\\n    number = line.strip()\\n    if re.match(\\\"^[0-9]{9,}$\\\", number):\\n     \\xA0 \\xA0print number + \\\": \\\" + str(generateCheckDigit(number))\\n    else:\\n     \\xA0 \\xA0print number\\n\")), mdx(\"h2\", {\n    \"id\": \"luhncheckpy\"\n  }, \"luhnCheck.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\n# From http://en.wikipedia.org/wiki/Luhn_algorithm\\nimport sys\\nimport re\\n\\ndef check_number(digits):\\n    _sum = 0\\n    alt = False\\n    for d in reversed(digits):\\n     \\xA0 \\xA0d = int(d)\\n     \\xA0 \\xA0assert 0 <= d <= 9\\n     \\xA0 \\xA0if alt:\\n     \\xA0 \\xA0 \\xA0 \\xA0d *= 2\\n     \\xA0 \\xA0 \\xA0 \\xA0if d > 9:\\n     \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0d -= 9\\n     \\xA0 \\xA0_sum += d\\n     \\xA0 \\xA0alt = not alt\\n    return (_sum % 10) == 0\\n\\nwhile 1:\\n    line = sys.stdin.readline()\\n    if not line: break\\n    number = line.strip()\\n    if re.match(\\\"^[0-9]{9,}$\\\", number):\\n     \\xA0 \\xA0print number + \\\": \\\" + str(check_number(number));\\n    else:\\n     \\xA0 \\xA0print number\\n\")), mdx(\"h2\", {\n    \"id\": \"chrome_bookmarks-extract_urlspy\"\n  }, \"chrome_bookmarks-extract_URLs.py\"), mdx(\"p\", null, \"Extracts URLs of all Chrome bookmarks in the specified bookmark folder (or many folders, if they collide by name). Works recursively.\"), mdx(\"p\", null, \"It\\u2019s also a nice example for general JSON parsing and querying (XPath-like) using Python.\"), mdx(\"p\", null, \"Requires the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://pypi.python.org/pypi/jsonpath/\"\n  }), \"jsonpath\"), \" Python module (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pypi-install jsonpath\"), \").\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\n\\nimport os\\nimport json\\nimport jsonpath\\n\\nbfile=open(os.path.expanduser(\\\"~/.config/chromium/Default/Bookmarks\\\"))\\nbookmarks=json.load(bfile)\\nterm_urls = jsonpath.jsonpath(bookmarks, \\\"$..children[?(@.name=\\\\\\\"SomeBookmarkFolder\\\\\\\")]..url\\\")\\n\\nfor url in term_urls:\\n        print url\\n\")), mdx(\"h2\", {\n    \"id\": \"url_encodepl\"\n  }, \"url_encode.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w -p\\ns/([^A-Za-z0-9])/sprintf(\\\"%%%02X\\\", ord($1))/seg;\\n\")), mdx(\"h2\", {\n    \"id\": \"url_decodepl\"\n  }, \"url_decode.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\n$str=<>;\\n$str =~ s/\\\\%([A-Fa-f0-9]{2})/pack('C', hex($1))/seg;\\nprint $str;\\nprint \\\"\\\\n\\\";\\n\")), mdx(\"h2\", {\n    \"id\": \"html_escape_with_entitiespl\"\n  }, \"html_escape_with_entities.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w -p\\n\\nBEGIN { use HTML::Entities; }\\n{\\n\\xA0$_ = encode_entities($_, '<>&\\\"');\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"ldap_ssha_makepy\"\n  }, \"ldap_ssha_make.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport hashlib\\nimport sys\\nimport os\\nfrom base64 import urlsafe_b64encode as encode\\nfrom base64 import urlsafe_b64decode as decode\\n\\ndef makeSecret(password):\\n\\xA0\\xA0\\xA0 salt = os.urandom(4)\\n\\xA0\\xA0\\xA0 h = hashlib.sha1(password)\\n\\xA0\\xA0\\xA0 h.update(salt)\\n\\xA0\\xA0\\xA0 return \\\"{SSHA}\\\" + encode(h.digest() + salt)\\n\\nprint \\\"Input password: \\\"\\npassword = sys.stdin.readline().rstrip()\\nprint \\\"Hashed:\\\"\\nprint makeSecret(password)\\n\")), mdx(\"h2\", {\n    \"id\": \"ldap_ssha_checkpy\"\n  }, \"ldap_ssha_check.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/python\\nimport hashlib\\nimport sys\\nfrom base64 import urlsafe_b64encode as encode\\nfrom base64 import urlsafe_b64decode as decode\\n\\ndef checkPassword(challenge_password, password):\\n\\xA0\\xA0\\xA0 challenge_bytes = decode(challenge_password[6:])\\n\\xA0\\xA0\\xA0 digest = challenge_bytes[:20]\\n\\xA0\\xA0\\xA0 salt = challenge_bytes[20:]\\n\\xA0\\xA0\\xA0 hr = hashlib.sha1(password)\\n\\xA0\\xA0\\xA0 hr.update(salt)\\n\\xA0\\xA0\\xA0 return digest == hr.digest()\\n\\nif len(sys.argv) < 2:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"Usage: \\\"+sys.argv[0]+\\\" password_hash\\\"\\nelse:\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 pass_hash = sys.argv[1]\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"Input password: \\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 password = sys.stdin.readline().rstrip()\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print pass_hash+\\\" \\\"+password\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print \\\"Check result: \\\"+str(checkPassword(pass_hash, password))\\n\")), mdx(\"h2\", {\n    \"id\": \"generate_passwords_no_ambiguous_charssh\"\n  }, \"generate_passwords_no_ambiguous_chars.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"apg -M SNCL -E \\\"O5Ss01Il:;|6b\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"soap_digest_checksh\"\n  }, \"soap_digest_check.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n\\nnonceb64=$1\\ncreated=$2\\npass=$3\\n(echo -n \\\"$nonceb64\\\" | base64 -d ; echo -n \\\"$created\\\"; echo -n \\\"$pass\\\") | sha1sum -b | awk '{print $1}' | xxd -c 40 -p -r | base64\\n\")), mdx(\"h2\", {\n    \"id\": \"rename_to_randomsh\"\n  }, \"rename_to_random.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n\\nif [ $# -ge 1 ]; then\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 while [ $# -ne 0 ]; do\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 if [ -e \\\"$1\\\" ]; then\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 random=\\\"$(dd if=/dev/urandom bs=512 count=1 2>/dev/null| md5sum -b | awk '{print $1}')\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 basename=$(basename \\\"$1\\\")\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 dirname=$(dirname \\\"$1\\\")\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 echo \\\"$dirname/$basename mv to $dirname/$random\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 mv \\\"$dirname/$basename\\\" \\\"$dirname/$random\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 else\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 echo \\\"$1 nie istnieje\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 fi\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 shift\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 done\\nelse\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 echo \\\"Uzycie: $0 pliki_lub_katalogi_do_przemianowania\\\"\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"rename_files_for_windows_fastpl\"\n  }, \"rename_files_for_windows_fast.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/bash\\n\\n(find ./ -depth -type d; find ./ -depth -type f;) | perl -e \\\"\\nuse File::Basename;\\nmy \\\\$illegal_chars = qr/[\\\\\\\\ \\\\\\\\|\\\\\\\\&\\\\\\\\?\\\\\\\\!\\\\\\\\*\\\\\\\\[\\\\\\\\]\\\\\\\\(\\\\\\\\)\\\\\\\\,\\\\\\\\=\\\\\\\\:\\\\\\\\@\\\\\\\\']+/;\\nwhile (<>) {\\n\\xA0 if (/\\\\$illegal_chars/) {\\n\\xA0\\xA0\\xA0 chomp;\\n\\xA0\\xA0\\xA0 my \\\\$old = \\\\$_;\\n\\xA0\\xA0\\xA0 my \\\\$basename = basename(\\\\$old);\\n\\xA0\\xA0\\xA0 my \\\\$dirname = dirname(\\\\$old);\\n\\xA0\\xA0\\xA0 \\\\$basename =~ s/\\\\$illegal_chars/_/g;\\n\\xA0\\xA0\\xA0 \\\\$basename =~ s/_{2,}/_/g;\\n\\xA0\\xA0\\xA0 my \\\\$new = \\\\\\\"\\\\$dirname/\\\\$basename\\\\\\\";\\n\\xA0\\xA0\\xA0 print \\\\\\\"\\\\$old ->\\\\n-> \\\\$new\\\\n\\\\\\\";\\n\\xA0\\xA0\\xA0 if ( -e \\\\$new ) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 print STDERR \\\\\\\"already exists: \\\\$new\\\\n\\\\\\\";\\n\\xA0\\xA0\\xA0 } else {\\n\\xA0\\xA0\\xA0 rename \\\\$old, \\\\$new;\\n\\xA0\\xA0\\xA0 }\\n\\xA0 }\\n}\\n\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"rename_files_perl_expressionpl\"\n  }, \"rename_files_perl_expression.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\n# by OLO\\n# pi\\u0105 cze 25 14:29:24 CEST 2004\\n# 1) Przeszukuje rekrsywnie podkatalogi, metoda DFS\\n# 2) Sprawdza, czy nazwa obiektu pasuje do wzorca (arg 1)\\n# 2) Jesli tak, dokonuje okreslonej substytucji (arg 2)\\n\\nuse strict;\\nuse Fcntl ':mode';\\nuse Data::Dumper;\\n\\nmy $debug = 1;\\n\\nmy $pattern;\\nmy $subst;\\n\\nif ($#ARGV >= 1) {\\n\\xA0 $pattern= qr/$ARGV[0]/;\\n\\xA0 $subst = $ARGV[1];\\n} else {\\n\\xA0 die \\\"Przeszukuje rekursywnie biezacy podkatalog i przemianowuje zawartosc.\\\\nUzycie:\\\\n$0 wzorzec_PCRE substytucja_PCRE \\\\nPrzyklad:\\\\n$0 '\\\\\\\\.doc' '.ole'\\\\n\\\";\\n}\\n\\nmy $dirname = '.';\\nmy $mode = (stat($dirname))[2];\\n\\nif (S_ISDIR($mode)) {\\n\\xA0 if ($debug) { print \\\"$dirname to katalog.\\\\n\\\"; }\\n\\xA0 descend($dirname);\\n}\\n\\nsub descend {\\n\\xA0 my $dirname = shift;\\n\\xA0 opendir DH, $dirname;\\n\\xA0 my @descend_list;\\n\\xA0 my @process_list;\\n\\xA0 my $entry;\\n\\xA0 my $pathname;\\n\\xA0 while ($entry = readdir(DH)) {\\n\\xA0\\xA0\\xA0 if ($entry !~ '^\\\\.$' && $entry !~ '^\\\\.\\\\.$') {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 $pathname = $dirname.'/'.$entry;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 my $mode = (stat($pathname))[2];\\n\\n\\xA0\\xA0\\xA0\\xA0\\xA0 if (S_ISDIR($mode)) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 push @descend_list, $pathname;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #descend($entry);\\n\\xA0\\xA0\\xA0\\xA0\\xA0 } elsif (-f $pathname) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 push @process_list, $pathname;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\n\\xA0\\xA0\\xA0 }\\n\\xA0 }\\n\\xA0 closedir DH;\\n\\xA0 foreach $pathname (@process_list) {\\n\\xA0\\xA0\\xA0 process($pathname);\\n\\xA0 }\\n\\xA0 foreach my $subdir (@descend_list) {\\n\\xA0\\xA0\\xA0 descend($subdir);\\n\\xA0\\xA0\\xA0 process($subdir);\\n\\xA0 }\\n}\\n\\nsub process {\\n\\xA0 my $pathname = shift;\\n\\xA0 #if ($debug) { print \\\"przetwarzanie $pathname\\\\n\\\"; }\\n\\xA0 if ($pathname =~ /$pattern/) {\\n\\xA0\\xA0\\xA0 #if ($debug) { print \\\"$pathname pasuje do wzorca $pattern, dokonuje substytucji s/$pattern/$subst/g.\\\\n\\\"; }\\n\\xA0\\xA0\\xA0 my $new_pathname = $pathname;\\n\\xA0\\xA0\\xA0 $new_pathname =~ s/$pattern/$subst/g;\\n\\xA0\\xA0\\xA0 print \\\"$pathname -> $new_pathname\\\\n\\\";\\n\\xA0\\xA0\\xA0 rename $pathname, $new_pathname;\\n\\xA0 }\\n\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"remove_newline_at_eofpl\"\n  }, \"remove_newline_at_eof.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -i -p\\nchomp if eof\\n\")), mdx(\"p\", null, \"Or directly from the shelll:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"perl -i -pe 'chomp if eof' <filename>\\n\")), mdx(\"h2\", {\n    \"id\": \"reread_partition_table_blockdevsh\"\n  }, \"reread_partition_table_blockdev.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nblockdev --rereadpt \\\"$1\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"scsi_rescan_bussh\"\n  }, \"scsi_rescan_bus.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nhost_number=\\\"$1\\\"\\necho \\\"1\\\" > /sys/class/fc_host/host${host_number}/issue_lip\\necho \\\"- - -\\\" > /sys/class/scsi_host/host${host_number}/scan\\n\")), mdx(\"h2\", {\n    \"id\": \"epoch2timepl\"\n  }, \"epoch2time.pl\"), mdx(\"p\", null, \"Convert UNIX epoch to human readable time:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\n#\\nuse strict;\\nmy $time = $ARGV[0];\\n\\nmy ($sec, $min, $hour, $day,$month,$year) = (localtime($time))[0,1,2,3,4,5];\\n# You can use 'gmtime' for GMT/UTC dates instead of 'localtime'\\n\\nprint \\\"Unix time \\\".$time.\\\" converts to \\\";\\nprintf(\\\"%04d-%02d-%02d %02d:%02d:%02d\\\\n\\\", $year+1900, $month + 1, $day, $hour, $min, $sec);\\n\\nmy $localestrtime = localtime($time);\\n\\nprint \\\"In locale format: $localestrtime\\\\n\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"epoch2timesh\"\n  }, \"epoch2time.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\ndate -d \\\"@${1}\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"primessh\"\n  }, \"primes.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n(for int in `seq 1024`; do factor $int; done;) | grep '^[0-9]\\\\+: [0-9]\\\\+$'\\n\")), mdx(\"h2\", {\n    \"id\": \"mplayer_play_dvd_iso_image_with_subssh\"\n  }, \"mplayer_play_DVD_iso_image_with_subs.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nmplayer -sub $1 -subcp $2 -dvd-device $3 dvd://1\\n\")), mdx(\"h2\", {\n    \"id\": \"keytool_add_ca_certsh\"\n  }, \"keytool_add_ca_cert.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# default keystore pass: \\\"changeit\\\"\\nkeytool -import -keystore /etc/java-1.5.0-sun/security/cacerts -trustcacerts -alias FIRMA -file PATH/TO/firma.pem\\n\")), mdx(\"h2\", {\n    \"id\": \"list-pkcs11-keystore\"\n  }, \"list PKCS#11 KeyStore\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"keytool -v -keystore NONE -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 \\xA0 -providerArg /.../pkcs11.cfg -list\\n\")), mdx(\"h2\", {\n    \"id\": \"list-pkcs12-keystore\"\n  }, \"list PKCS#12 KeyStore\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"keytool -v -keystore STORE.p12 -storetype PKCS12 -list\\n\")), mdx(\"h2\", {\n    \"id\": \"import-pkcs12-to-jks-keystore\"\n  }, \"Import PKCS#12 to JKS KeyStore\"), mdx(\"p\", null, \"keytool -importkeystore -srckeystore SRC.p12 -destkeystore DEST.jks -srcstoretype PKCS12 -deststoretype JKS -srcstorepass PASS1 -deststorepass PASS2\"), mdx(\"h2\", {\n    \"id\": \"python_compilesh\"\n  }, \"python_compile.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n(echo \\\"import py_compile\\\"; echo \\\"py_compile.compile(\\\\\\\"$1\\\\\\\")\\\") | python\\n(echo \\\"import py_compile\\\"; echo \\\"py_compile.compile(\\\\\\\"$1\\\\\\\")\\\") | python -O\\n\")), mdx(\"h2\", {\n    \"id\": \"terroristizelisp\"\n  }, \"terroristize.lisp\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \";This maker of food for the NSA Line Eater is copyright (C) Eli Gottlieb, December 26 2005.\\n;It's under the GNU General Public License version 2.0.\\n(defvar *dictionary* '(\\\"assasinate\\\" \\\"kill\\\" \\\"suicide bomb\\\" \\\"dirty bomb\\\" \\\"nuclear device\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"Al-Quaeda\\\" \\\"insurgency\\\" \\\"Hamas\\\" \\\"Baath\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"jihad\\\" \\\"Allah\\\" \\\"Islam\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"Sears Tower\\\" \\\"Empire State Building\\\" \\\"White House\\\" \\\"Golden Gate Bridge\\\" \\\"New York City subway\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"Iraq\\\" \\\"Afghanistan\\\" \\\"Palestine\\\" \\\"Iran\\\" \\\"Saudi Arabia\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"Israel\\\" \\\"America\\\" \\\"England\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"infidels\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"Usama bin Laden\\\"\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 \\\"London\\\"))\\n\\n(defun terroristize (lines)\\n\\xA0 (if (not (equalp lines nil))\\n\\xA0\\xA0\\xA0 (append\\n\\xA0\\xA0\\xA0\\xA0\\xA0 (if (equalp (cdr lines) nil)\\n\\xA0\\xA0\\xA0 (list (car lines))\\n\\xA0\\xA0\\xA0 (list (car lines) (nth (random (length *dictionary*)) *dictionary*)))\\n\\xA0\\xA0\\xA0\\xA0\\xA0 (terroristize (cdr lines)))\\n\\xA0\\xA0\\xA0 nil))\\n\\n(defun equal-to-any (value any)\\n\\xA0 (cond\\n\\xA0\\xA0\\xA0 ((equalp value (car any)) (car any))\\n\\xA0\\xA0\\xA0 ((cdr any) (equal-to-any value (cdr any)))\\n\\xA0\\xA0\\xA0 ('t nil)))\\n\\n(defun all-whitespace-before-p (the-string start-index end-index)\\n\\xA0 (do ((index start-index (- index 1)))\\n\\xA0\\xA0\\xA0\\xA0\\xA0 ((equalp index end-index) T)\\n\\xA0\\xA0\\xA0 (if (not (equalp (elt the-string index) #\\\\ )) (return nil))))\\n\\n(defun token-delimited-p (token-beginning index-of-char string-data delimiters)\\n\\xA0 (and (equal-to-any (elt string-data index-of-char) delimiters) (not (all-whitespace-before-p string-data index-of-char token-beginning))))\\n\\n(defun tokenize (string-input delimiters &optional (inclusive nil))\\n\\xA0 (setf tokens nil)\\n\\xA0 (setf token-beginning 0)\\n\\xA0 (dotimes (c (length string-input))\\n\\xA0\\xA0\\xA0 (if (token-delimited-p token-beginning c string-input delimiters)\\n\\xA0\\xA0\\xA0\\xA0\\xA0 (progn\\n\\xA0\\xA0\\xA0 (setf tokens (append tokens (list (subseq string-input token-beginning (if inclusive (+ c 1) c)))))\\n\\xA0\\xA0\\xA0 (setf token-beginning (+ c 1)))))\\n\\xA0 (if (< token-beginning (length string-input))\\n\\xA0\\xA0\\xA0 (append tokens (list (subseq string-input token-beginning)))\\n\\xA0\\xA0\\xA0 tokens))\\n\\n(defun parse-for-words (sentence)\\n\\xA0 (tokenize sentence '(#\\\\ )))\\n\\n(defun parse-for-sentences (message)\\n\\xA0 (tokenize message '(#\\\\. #\\\\? #\\\\!) T))\\n\\n(defun string-reglue (str1 str2 delimiter)\\n\\xA0 (concatenate 'string (concatenate 'string str1 (string delimiter)) str2))\\n\\n(defun list-to-string (list-input)\\n\\xA0 (if (stringp (car list-input))\\n\\xA0\\xA0\\xA0 (if (cdr list-input)\\n\\xA0\\xA0\\xA0\\xA0\\xA0 (string-reglue (car list-input) (list-to-string (cdr list-input)) #\\\\ )\\n\\xA0\\xA0\\xA0\\xA0\\xA0 (car list-input))\\n\\xA0\\xA0\\xA0 nil))\\n\\n;This is the main function. Hand it an arbitrary string to be sprinkled with \\\"terrorist lingo\\\" ;-).\\n(defun feed-echelon (message)\\n\\xA0 (setf sentences (mapcar 'parse-for-words (parse-for-sentences message)))\\n\\xA0 (dotimes (sentence (length sentences))\\n\\xA0\\xA0\\xA0 (setf (elt sentences sentence) (terroristize (elt sentences sentence))))\\n\\xA0 (list-to-string (mapcar 'list-to-string sentences)))\\n; by OLO:\\n; usage:\\n; $ clisp -repl terroristize.lisp\\n; $ (feed-echelon \\\"Hello world.\\\")\\n\")), mdx(\"h2\", {\n    \"id\": \"jpegtran_from_jpegexifsh\"\n  }, \"jpegtran_from_jpegexif.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nfor jpg in \\\"$@\\\"; do\\n\\xA0\\xA0\\xA0 #randname=\\\"$(dd if=/dev/urandom bs=256 count=1 2>/dev/null | md5sum -b | cut -b 1-32).tmp\\\"\\n\\xA0\\xA0\\xA0 #touch -r \\\"$jpg\\\" -F 1 $randname\\n\\xA0\\xA0\\xA0 echo $orient \\\"$jpg\\\";\\n\\xA0\\xA0\\xA0 #jpegtran -copy all -rotate 90 \\\"$jpg\\\" > \\\"$jpg.tmp\\\" && mv -f \\\"$jpg.tmp\\\" \\\"$jpg\\\" &&\\xA0 jpegexiforient -1 \\\"$jpg\\\";\\n\\xA0\\xA0\\xA0 jhead -autorot -ft \\\"$jpg\\\"\\n\\xA0\\xA0\\xA0 #touch -r $randname \\\"$jpg\\\"\\n\\xA0\\xA0\\xA0 #rm $randname\\ndone;\\n\")), mdx(\"h2\", {\n    \"id\": \"exif_timestamps_to_file_modtime_in_curdirpy\"\n  }, \"Exif_timestamps_to_file_modtime_in_curdir.py\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/env python\\n\\nimport exifread\\nimport os\\nimport time\\n\\ndef get_exif_timestamp(filename):\\n    with open(filename) as f:\\n        tags = exifread.process_file(f, stop_tag='DateTimeOriginal')\\n        #print tags.keys()\\n        return tags.get('EXIF DateTimeOriginal')\\n\\ndef exif_ts_to_unix_ts(exif_ts):\\n    return time.mktime(time.strptime(exif_ts.values, \\\"%Y:%m:%d %H:%M:%S\\\"))\\n\\ndef set_file_ts_from_exif(filename, exif_ts):\\n    if exif_ts:\\n        unix_ts = exif_ts_to_unix_ts(exif_ts)\\n        os.utime(filename, (unix_ts, unix_ts))\\n        print filename + ' timestamp set to: ' + str(unix_ts) + ' (' + exif_ts.values + ')'\\n\\ndef main():\\n    for filename in os.listdir('.'):\\n        if not os.path.isfile(filename):\\n            continue\\n        try:\\n            exif_ts = get_exif_timestamp(filename)\\n            set_file_ts_from_exif(filename, exif_ts)\\n        except:\\n            print 'ERROR when processing file ' + filename\\n\\nif __name__ == '__main__':\\n    main()\\n\")), mdx(\"h2\", {\n    \"id\": \"input_rate_notifierpl\"\n  }, \"input_rate_notifier.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\n# by Aleksander Adamowski\\n# Wed Nov 23 23:26:12 CET 2005\\n# Skrypt wykrywa przekroczenie pewnej ilosci wierszy na ilosc sekund na STDIN\\n# i uruchamia dane polecenie powiadamiajace o przekroczeniu.\\n\\nuse strict;\\n\\nif (scalar(@ARGV) < 3) {\\n\\xA0 die \\\"Uzycie: $0 ilosc_wierszy ilosc_sekund polecenie_powiadamiajace\\\\n\\\";\\n}\\n\\nmy $rowcount = $ARGV[0];\\nmy $seconds = $ARGV[1];\\nmy $notificator = $ARGV[2];\\nmy @queue = ();\\n\\n# Kiedy ostatnio bylo powiadomienie (moze byc nie czesciej, niz ilosc_sekund aby uniknac spamowania):\\nmy $lastnotification = 0;\\n\\nmy $time;\\nmy $tailtime;\\nmy $queuetime;\\n\\nwhile (<STDIN>) {\\n\\xA0 $time = time;\\n\\xA0 unshift @queue, $time;\\n\\xA0 # Jesli kolejka jest pelna, zaczynamy zdejmowac wpisy z jej konca:\\n\\xA0 if (scalar(@queue) > $rowcount) {\\n\\xA0\\xA0\\xA0 pop @queue;\\n\\xA0\\xA0\\xA0 # Czas na koncu kolejki:\\n\\xA0\\xA0\\xA0 $tailtime = $queue[$#queue];\\n\\xA0\\xA0\\xA0 # Jesli koniec kolejki jest malo oddalony w czasie (ponizej $seconds) od poczatku, to przeplywnosc jest przekroczona:\\n\\xA0\\xA0\\xA0 $queuetime = (time - $tailtime);\\n\\xA0\\xA0\\xA0 if ($queuetime < $seconds && (time - $lastnotification) > $seconds) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 # Powiadamiamy:\\n\\xA0\\xA0\\xA0\\xA0\\xA0 #print \\\"Rate EXCEEDED! $rowcount rows / $queuetime seconds\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0 system $notificator or die $?;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 $lastnotification = time;\\n\\xA0\\xA0\\xA0 }\\n\\xA0 }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"monitor_logfilepl\"\n  }, \"monitor_logfile.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\n# by OLO\\n# Tue Aug 16 11:41:26 CEST 2005\\n# Monitoruje przyrastajacy plik logow oczekujac na pojawienie sie wzorca.\\n# Po pojawieniu sie wzorca wysyla powiadomienie pod zadany adres e-mail.\\nuse strict;\\nuse File::Tail;\\nuse Mail::Sendmail;\\nuse Getopt::Std;\\n\\n$| = 1;\\n\\nour($opt_n);\\ngetopts('n');\\n\\nif (scalar(@ARGV) < 3) {\\n\\xA0 print STDERR <<EOD\\nUzycie:\\n\\xA0$0 [-n] plik_logu 'wzorzec regexp' adres_email_do_powiadomienia\\nEOD\\n;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 die(\\\"Nieprawidlowa skladnia.\\\\n\\\");\\n}\\n\\nmy $regexp_source = $ARGV[1];\\nmy $regexp = qr/$regexp_source/;\\n\\nmy $line;\\nmy $file=File::Tail->new(name => $ARGV[0], interval => 1, maxinterval => 2, ignore_nonexistant => 1);\\nwhile (defined($line=$file->read)) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 if ($line =~ /$regexp/) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 my $message = \\\"W pliku ${ARGV[0]} pojawil sie wiersz odpowiadajacy wzorcowi $regexp.\\\\n\\\\nOto ten wiersz:\\\\n\\\\n$line\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 my %mail = ( To\\xA0\\xA0\\xA0\\xA0\\xA0 => $ARGV[2],\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 From\\xA0\\xA0\\xA0 => 'postmaster@altkom.pl',\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 Subject => 'Pojawil sie wpis w logu odpowiadajacy wzorcowi',\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 Message => $message\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 );\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 print $message;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 sendmail(%mail) or die $Mail::Sendmail::error;\\n\\xA0\\xA0\\xA0 if (! $opt_n) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 exit 0;\\n\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"exec_timeout_killpl\"\n  }, \"exec_timeout_kill.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\n# by OLO\\n# czw lis\\xA0 3 11:25:23 CET 2005\\n# Skrypt uruchamia komende, czeka az komenda sie zakonczy lub minie timeout.\\n# Jesli komenda sie zakonczy w zadanym czasie, zwraca taki kod, jak ta komenda;\\n# jesli komenda dalej dziala - KILLuje ja najpierw SIGTERMem, potem SIGKILLem\\n# jesli to nie pomoze i zwraca kod 1 (jesli wystarczyl SIGTERM) lub kod 2 (SIGKILL byl konieczny).\\n\\nuse strict;\\nuse Getopt::Std;\\nuse POSIX;\\n#use POSIX \\\":sys_wait_h\\\";\\n\\nour($opt_t);\\ngetopts('t:');\\n\\nif (defined($opt_t) && defined($ARGV[0])) {\\n\\xA0 #print \\\"$opt_t\\\\n\\\";\\n\\xA0 #print $ARGV[0].\\\"\\\\n\\\";\\n\\xA0 my $pid = fork();\\n\\xA0 die \\\"fork() failed: $!\\\" unless defined $pid;\\n\\xA0 if ($pid) {\\n\\xA0\\xA0\\xA0 # Jestem tatusiem!\\n\\xA0\\xA0\\xA0 my $countdown = int($opt_t);\\n\\xA0\\xA0\\xA0 if (!$countdown > 0 ) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 die(\\\"Nieprawidlowa wartosc timeout!\\\\n\\\");\\n\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0 for ($countdown = int($opt_t); $countdown > 0; $countdown--) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 #print \\\"$countdown\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0 sleep 1;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 my $kid = waitpid($pid, WNOHANG);\\n\\xA0\\xA0\\xA0\\xA0\\xA0 my $status = $?;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 if ($kid == 0) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #print \\\"Dziecko dziala\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0 } else {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 my $retval = ($status >> 8);\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #print \\\"Retval: $retval\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #$?>> 8\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 exit $retval;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0 }\\n\\xA0\\xA0\\xA0 # Minal timeout, a dziecko caly czas dziala\\n\\xA0\\xA0\\xA0 # Killujemy zatem:\\n\\xA0\\xA0\\xA0 kill SIGTERM, $pid;\\n\\xA0\\xA0\\xA0 sleep 2;\\n\\xA0\\xA0\\xA0 my $kid = waitpid($pid, WNOHANG);\\n\\xA0\\xA0\\xA0 my $status = $?;\\n\\xA0\\xA0\\xA0 if ($kid == 0) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0 print STDERR \\\"Dziecko CIAGLE dziala, ubijam na twardo...\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0 kill SIGKILL, $pid;\\n\\xA0\\xA0\\xA0\\xA0\\xA0 exit 2;\\n\\xA0\\xA0\\xA0 } else {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 my $retval = ($status >> 8);\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #print \\\"Retval: $retval\\\\n\\\";\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 #exit $retval;\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 exit 1;\\n\\xA0\\xA0\\xA0 }\\n\\xA0 }\\n\\xA0 else {\\n\\xA0\\xA0\\xA0 # Da-da!\\n\\xA0\\xA0\\xA0 exec(@ARGV) or die(\\\"Couldn't exec: \\\".join(' ', @ARGV));\\n\\xA0\\xA0\\xA0 exit(0);\\n\\xA0 }\\n\\n} else {\\n\\xA0 print STDERR \\\"Usage:\\\\n$0 -t timeout command [args] \\\\n\\\";\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"ettercap_arp_sniffsh\"\n  }, \"ettercap_arp_sniff.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nettercap -Tq -M arp //\\n\")), mdx(\"h2\", {\n    \"id\": \"amr_to_wavsh\"\n  }, \"amr_to_wav.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nmplayer \\\"$1\\\" -ao pcm:file=\\\"$1.wav\\\" -vc null -vo null\\n\")), mdx(\"h2\", {\n    \"id\": \"convert_flac_to_mp3_subtreesh\"\n  }, \"convert_flac_to_mp3_subtree.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nif [ $# -ge 1 ]; then\\nfind \\\"$1\\\" -type f -iname '*.flac' | xargs -n 1 dirname | uniq | perl -pe 's{^}{mp3/};' | xargs mkdir -p\\n\\nfor file in $(find \\\"$1\\\" -type f -iname '*.flac' ); do\\n     \\xA0 \\xA0ARTIST=`metaflac \\\"$file\\\" --show-tag=ARTIST | sed s/.*=//g`\\n     \\xA0 \\xA0TITLE=`metaflac \\\"$file\\\" --show-tag=TITLE | sed s/.*=//g`\\n     \\xA0 \\xA0ALBUM=`metaflac \\\"$file\\\" --show-tag=ALBUM | sed s/.*=//g`\\n     \\xA0 \\xA0GENRE=`metaflac \\\"$file\\\" --show-tag=GENRE | sed s/.*=//g`\\n     \\xA0 \\xA0TRACKNUMBER=`metaflac \\\"$file\\\" --show-tag=TRACKNUMBER | sed s/.*=//g`\\n     \\xA0 \\xA0DATE=`metaflac \\\"$file\\\" --show-tag=DATE | sed s/.*=//g`\\n\\n     \\xA0 \\xA0outfile=\\\"mp3/$(echo \\\"$file\\\" | perl -pe 's/.flac$/.mp3/i')\\\";\\n     \\xA0 \\xA0flac -d -c \\xA0\\\"$file\\\" | lame --preset standard - \\\"$outfile\\\";\\n     \\xA0 \\xA0id3 -t \\\"$TITLE\\\" -T \\\"${TRACKNUMBER:-0}\\\" -a \\\"$ARTIST\\\" -A \\\"$ALBUM\\\" -y \\\"$DATE\\\" -g \\\"${GENRE:-12}\\\" \\\"$outfile\\\"\\ndone;\\nelse\\n     \\xA0 \\xA0echo \\\"Usage: $0 directory_with_flac_files\\\"\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"ffmpeg_transcode_avi_to_androidsh\"\n  }, \"ffmpeg_transcode_avi_to_Android.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# Using a xargs queue for 4 parallel processes to fully utilise a 4-core CPU:\\n(for krtekavi in ../*Krtek*.avi; do\\n\\xA0 \\xA0 \\xA0 \\xA0 krtekandroid=\\\"$(basename \\\"$krtekavi\\\").mp4\\\"\\n\\xA0 \\xA0 \\xA0 \\xA0 echo \\\" -threads 4 -strict experimental -i $krtekavi -s 480x320 -vcodec mpeg4 -acodec aac -ac 1 -ar 16000 -r 13 -ab 32000 -aspect 3:2 $krtekandroid\\\"\\ndone) | xargs -t -P 4 -L 1 ffmpeg\\n\")), mdx(\"h2\", {\n    \"id\": \"ldapsearch_get_suffixessh\"\n  }, \"ldapsearch_get_suffixes.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nldapsearch -x -H ldap://127.0.0.1 -b \\\"\\\" -s base \\\"(objectclass=*)\\\"\\xA0namingContexts\\n\")), mdx(\"p\", null, \"AD_search_groups.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n\\nif [ $# -lt 2 ]; then\\n\\n    cat <<EOF >&2\\nUsage:\\nAD_search_groups.sh bind_DN member_DN\\ne.g.:\\nAD_search_groups.sh 'CN=Adamowski Aleksander,OU=Users,OU=Organization,DC=example,DC=com' 'CN=Adamowski Aleksander,OU=Users,OU=Organization,DC=example,DC=com'\\nEOF\\nelse\\n    ldapsearch -LLL -H ldap://your-dc-hostname-from-logonserver-windows-env-var -D \\\"$1\\\" -b DC=example,DC=com -W -x \\\"member=$2\\\" name displayname mail\\nfi\\n\")), mdx(\"h2\", {\n    \"id\": \"iconv_utf8_to_ascii_translit\"\n  }, \"iconv_utf8_to_ascii_translit\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"iconv -f UTF-8 -t US-ASCII//TRANSLIT\\n\")), mdx(\"h2\", {\n    \"id\": \"wikiconvpl\"\n  }, \"wikiconv.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\n\\nuse strict;\\nuse CGI;\\n\\nmy @standardFilteredTags = ('div', 'span', 'font');\\nmy $q = CGI->new();\\nmy $title = 'Konwerter HTML 2 MediaWiki';\\nprint $q->header(-type=>'text/html', -charset=>'utf-8'),\\n     \\xA0$q->start_html($title),\\n     \\xA0$q->h1($title);\\n\\nprint $q->start_form(-method=>'POST'),\\n     \\xA0$q->p('Filtrowane znaczniki HTML:'),\\n     \\xA0$q->checkbox_group(-name=>'standard_tags',\\n     \\xA0 \\xA0 \\xA0-values=> \\\\@standardFilteredTags,\\n     \\xA0 \\xA0 \\xA0-rows=>2, -columns=>2, -checked=>1),\\n     \\xA0$q->p('Dodatkowe filtrowane znaczniki HTML (rozdziel spacjami):'),\\n     \\xA0 \\xA0$q->textfield(-name=>'additional_tags',\\n     \\xA0 \\xA0 \\xA0 \\xA0-size=>50),\\n     \\xA0 \\xA0$q->p('Tekst HTML:'),\\n     \\xA0 \\xA0$q->textarea(-name=>'htmltext',\\n     \\xA0 \\xA0 \\xA0 \\xA0-default=>'<html><h1>Nag\\u0142\\xF3wek 1</h1><h2>Nag\\u0142owek 2</h2><p><span class=\\\"klaska\\\">Jaki\\u015B</span> <font color=\\\"red\\\">tekst</font></p></html>',\\n     \\xA0 \\xA0 \\xA0 \\xA0-rows=>20,\\n     \\xA0 \\xA0 \\xA0 \\xA0-columns=>120),\\n     \\xA0 \\xA0$q->p($q->submit(-name=>'submit',\\n     \\xA0 \\xA0 \\xA0 \\xA0-value=>'Konwertuj')),\\n     \\xA0 \\xA0$q->endform;\\n\\nif ($q->param('htmltext')) {\\n\\xA0\\xA0use HTML::WikiConverter;\\n\\xA0\\xA0my $wc = new HTML::WikiConverter( dialect => 'MediaWiki' );\\n\\n\\xA0\\xA0my $mediaWikiText = $wc->html2wiki($q->param('htmltext'));\\n\\n\\xA0\\xA0my @standards = $q->param('standard_tags');\\n\\xA0\\xA0my @standardsFiltered = map {+s/[^a-zA-Z0-9]//g; $_} @standards;\\n\\xA0\\xA0my @additionals = split(' ', $q->param('additional_tags'));\\n\\xA0\\xA0my @additionalsFiltered = map {+s/[^a-zA-Z0-9]//g; $_} @additionals;\\n\\xA0\\xA0my @tags = (@standardsFiltered, @additionalsFiltered);\\n\\n\\xA0\\xA0foreach my $tag (@tags){\\n    $mediaWikiText =~ s/\\\\<\\\\/?$tag[^>]*>//g;\\n\\xA0\\xA0}\\n\\n\\xA0\\xA0print $q->h1('Wynik w formacie MediaWiki');\\n\\xA0\\xA0print '<pre style=\\\"border: thin solid black; background-color: lightgrey;\\\">';\\n\\xA0\\xA0print \\\"\\\\n\\\";\\n\\xA0\\xA0print $q->escapeHTML($mediaWikiText);\\n#print $mediaWikiText;\\n\\xA0\\xA0print \\\"</pre>\\\\n\\\";\\n}\\nprint $q->end_html;\\n\")), mdx(\"h2\", {\n    \"id\": \"wiki_indent\"\n  }, \"wiki_indent\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"alias wiki_indent=\\\"perl -e '@all=<>; @out= map {\\\\$_ = \\\\\\\" \\\\\\\".\\\\$_;} @all; print @out; print \\\\\\\"\\\\n\\\\\\\";'\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"encode_bcdpl\"\n  }, \"encode_BCD.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl -w\\nuse strict;\\n\\nsub encode_BCD {\\nreturn pack \\\"H*\\\", join \\\"\\\", @_\\n};\\n\\nmy $decString = $ARGV[0];\\nmy $bin = unpack(\\\"B*\\\",encode_BCD($decString));\\nmy $groupedBin = $bin;\\n\\n$groupedBin =~ s/(.{4})/$1 /g;\\nprint \\\"Packed BCD representation of decimal string $decString:\\\\n\\\";\\nprint \\\"binary:\\\\n\\\";\\nprint \\\"$bin\\\\n\\\";\\nprint \\\"grouped binary:\\\\n\\\";\\nprint \\\"$groupedBin\\\\n\\\";\\nprint \\\"hexadecimal (the same as decimal):\\\\n\\\";\\nprint \\\"$decString\\\\n\\\";\\n\")), mdx(\"h2\", {\n    \"id\": \"jboss_list_jndi\"\n  }, \"jboss_list_JNDI\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sh /opt/jboss/bin/twiddle.sh invoke jboss:service=JNDIView list true\\n\")), mdx(\"p\", null, \"Listuje zawarto\\u015B\\u0107 JNDI.\"), mdx(\"h2\", {\n    \"id\": \"jboss_scp_deploy_and_waitsh\"\n  }, \"jboss_scp_deploy_and_wait.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# deploys EARs from a project to all server nodes of a JBoss cluster,\\xA0\\n# waiting for successful deployment of each EAR on given server.\\n# The target servers _must_ have the Expect package that contains the\\n# \\\"unbuffer\\\" utility installed!\\n\\nBUILD_DIR=$HOME/workspace/projectname\\nJBOSS_DIR=/opt/jboss/server/projectname\\n\\nfor host in server01 server02; do\\n    login=root@$host\\n    for ear in projectname-integration projectname-business; do\\n\\n     \\xA0 \\xA0fullpath=$(find $BUILD_DIR/ -wholename \\\"*ear/target/$ear-?.?.?.ear\\\" | head -n 1)\\n     \\xA0 \\xA0echo ========================================================\\n     \\xA0 \\xA0echo $fullpath\\n\\n     \\xA0 \\xA0# Make sure that the file is deemed newer than any previously rsync-ed:\\n     \\xA0 \\xA0touch $fullpath\\n     \\xA0 \\xA0rsync -vP -T $JBOSS_DIR/tmp $fullpath $login:$JBOSS_DIR/deploy/\\n     \\xA0 \\xA0# Monitor remote log file, waiting until the app starts up:\\n     \\xA0 \\xA0ssh $login \\\"grep -m 1 'Started J2EE application.*$ear-[-0-9.]\\\\+.ear' <(unbuffer -p tail -n 0 -f $JBOSS_DIR/log/server.log)\\\"\\n     \\xA0 \\xA0echo \\\"Deployment of $ear on $host ended.\\\"\\n     \\xA0 \\xA0sleep 1\\n    done;\\ndone;\\n\")), mdx(\"h2\", {\n    \"id\": \"sizeof_voidc\"\n  }, \"sizeof_void.c\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#include <stdio.h>\\nint main(int argc, char *argv[]) {\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"=== Pointers: ===\\\\n\\\");\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(void *) is %d\\\\n\\\", (int)sizeof(void *));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(int *) is %d\\\\n\\\", (int)sizeof(int *));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(char *) is %d\\\\n\\\", (int)sizeof(char *));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"=== Integral types: ===\\\\n\\\");\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(unsigned char) is %d\\\\n\\\", (int)sizeof(unsigned char));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(short) is %d\\\\n\\\", (int)sizeof(short));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(char) is %d\\\\n\\\", (int)sizeof(char));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(int) is %d\\\\n\\\", (int)sizeof(int));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(long) is %d\\\\n\\\", (int)sizeof(long));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 printf(\\\"sizeof(long long) is %d\\\\n\\\", (int)sizeof(long long));\\n\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 return 0;\\n}\\n\\ngcc -Wall -pedantic -o sizeof_void sizeof_void.c\\n\")), mdx(\"p\", null, \"Na 32-bitowej zobaczysz:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"=== Pointers: ===\\nsizeof(void *) is 4\\nsizeof(int *) is 4\\nsizeof(char *) is 4\\n=== Integral types: ===\\nsizeof(unsigned char) is 1\\nsizeof(short) is 2\\nsizeof(char) is 1\\nsizeof(int) is 4\\nsizeof(long) is 4\\nsizeof(long long) is 8\\n\")), mdx(\"p\", null, \"Na 64-bitowej natomiast:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"=== Pointers: ===\\nsizeof(void *) is 8\\nsizeof(int *) is 8\\nsizeof(char *) is 8\\n=== Integral types: ===\\nsizeof(unsigned char) is 1\\nsizeof(short) is 2\\nsizeof(char) is 1\\nsizeof(int) is 4\\nsizeof(long) is 8\\nsizeof(long long) is 8\\n\")), mdx(\"p\", null, \"Jak wida\\u0107 jedyna r\\xF3\\u017Cnica jest w rozmiarze long-\\xF3w (model \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://en.wikipedia.org/wiki/64-bit#64-bit_data_models\"\n  }), \"LP64\"), \") i wska\\u017Anik\\xF3w.\"), mdx(\"h2\", {\n    \"id\": \"phl_dump_tokensh\"\n  }, \"phl_dump_token.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n(echo 6; echo N; echo; echo 99;) |/opt/PSV_linux_client/csv/utils/phl\\n\")), mdx(\"h2\", {\n    \"id\": \"phl_object_deletersh\"\n  }, \"phl_object_deleter.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n(echo 11; echo; echo; echo 35; echo; echo 38; echo; echo; echo 38; echo; echo;exit; ) | /opt/PSV_linux_client/csv/utils/phl\\n\")), mdx(\"h2\", {\n    \"id\": \"explode_zipssh\"\n  }, \"explode_zips.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# Iteratively explode all ZIP/JAR/WAR/EAR archives in the current dir and all the archives they contain.\\n\\nfoundzips=1\\nwhile [ $foundzips -gt 0 ]; do\\n\\xA0\\xA0IFS=$'\\\\n'\\n\\xA0\\xA0foundzips=0\\n\\xA0\\xA0# Not very efficient to re-find for each sublevel, but it's simple:\\n\\xA0\\xA0for zipfile in $(find ./ -type f -iname '*.zip' -or -iname '*.[jwe]ar'); do\\n    foundzips=1\\n    echo \\\"Archive: [$zipfile]\\\"\\n    expdir=\\\"$zipfile.exploded\\\"\\n    if [ ! -e \\\"$expdir\\\" ]; then\\n     \\xA0dirpushed=0\\n     \\xA0zipfilebasename=\\\"$(basename \\\"$zipfile\\\")\\\"\\n     \\xA0echo \\\"making $expdir\\\" && \\\\\\n     \\xA0mkdir \\\"$expdir\\\" && \\\\\\n     \\xA0echo \\\"entering $expdir\\\" && \\\\\\n     \\xA0pushd \\\"$expdir\\\" && \\\\\\n     \\xA0dirpushed=1 && \\\\\\n     \\xA0echo \\\"unzipping $PWD/../$zipfilebasename\\\" && \\\\\\n     \\xA0unzip \\\"../$zipfilebasename\\\" && \\\\\\n     \\xA0echo \\\"removing $PWD/../$zipfilebasename\\\" && \\\\\\n     \\xA0rm \\\"../$zipfilebasename\\\" ||\\n     \\xA0mv \\\"../$zipfilebasename\\\" \\\"../$zipfilebasename.bad\\\"\\n     \\xA0if [ $dirpushed -gt 0 ]; then\\n     \\xA0 \\xA0popd\\n     \\xA0fi;\\n    fi;\\n    finish=0\\n\\xA0\\xA0done;\\ndone;\\n\")), mdx(\"h2\", {\n    \"id\": \"rename_jpg_based_on_exif_timestampsh\"\n  }, \"rename_jpg_based_on_exif_timestamp.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nfor jpg in *.jpg; do\\n     \\xA0 \\xA0tag=\\\"$(exif -m -t 0x9003 \\\"$jpg\\\" | perl -pe 'tr/: /-_/;')\\\"\\n     \\xA0 \\xA0mv -i \\\"Renaming [$jpg] to [$tag.jpg]\\\"\\n     \\xA0 \\xA0mv -i \\\"$jpg\\\" \\\"$tag.jpg\\\"\\ndone\\n\")), mdx(\"h2\", {\n    \"id\": \"do_postmark_testssh\"\n  }, \"do_postmark_tests.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# (c) 2010 Aleksander Adamowski\\n# This script benchmarks various GPT partition offsets\\n# in order to find an optimal one for performance.\\n#\\n# Written for optimal partitioning of my new 4 kB sector\\n# Western Digital Advanced Format HDD (WD15EARS).\\n#\\n\\nwarning=\\\"WARNING!!!\\nThis script completely erases significant portions of the configured block\\xA0\\ndevice (the \\\\\\\"device\\\\\\\" variable specified in its body).\\n\\nShoots first, asks questions later.\\n\\nIn order to certify that you know what you're doing and accept that you WON'T\\xA0\\nHOLD THE AUTHOR OF THIS SCRIPT LIABLE FOR ANY DAMAGES THAT IT MIGH CAUSE,\\nyou have to modify the script by removing \\xA0or commenting out the \\\\\\\"exit 5\\\\\\\"\\xA0\\ncommand that prevents it from running.\\nEOD\\\"\\n\\necho \\\"$warning\\\"\\n\\nexit 5\\n\\n# Here begins the actual script logic\\ndevice=sdb\\nexport LANG=C\\n\\n# part_offset in sectors (512B unless the device reports other size to parted):\\npart_offset=41\\n\\nfor part_offset in $(seq 41 64); do\\n    umount /mnt/${device}1\\n    parted /dev/$device unit s rm 1\\n    sleep 1\\n    parted_out=\\\"$(parted -s /dev/$device unit s \\\"mkpart primary ext2 $part_offset -1\\\")\\\"\\n    if [ $? -ne 0 ]; then\\n     \\xA0 \\xA0echo \\\"Parted error:\\\"\\n     \\xA0 \\xA0echo \\\"$parted_out\\\"\\n     \\xA0 \\xA0last_sector=\\\"$(echo \\\"$parted_out\\\" | fgrep 'closest location we can manage' | perl -e '$_ = <>; if ($_ =~ /to ([0-9]+)s./) { print $1; }' )\\\"\\n     \\xA0 \\xA0echo \\\"Last possible partition sector:\\\"\\n     \\xA0 \\xA0echo \\\"[$last_sector]\\\"\\n     \\xA0 \\xA0parted_out=\\\"$(parted -s /dev/$device unit s \\\"mkpart primary ext2 $part_offset $last_sector\\\")\\\"\\n     \\xA0 \\xA0if [ $? -ne 0 ]; then\\n     \\xA0 \\xA0 \\xA0 \\xA0echo \\\"FATAL ERROR: could not determine proper sector range for new partition:\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0echo \\\"$parted_out\\\"\\n     \\xA0 \\xA0 \\xA0 \\xA0exit 1\\n     \\xA0 \\xA0fi\\n    fi\\n    sleep 1\\n    parted /dev/$device unit s print | tee -a \\\"parted_dev_${device}_partition_at_${part_offset}s.txt\\\"\\n    sync\\n    mkfs.ext4 -T largefile4 /dev/${device}1\\n    mount /dev/${device}1 /mnt/${device}1\\n    ls -la /mnt/${device}1\\n    cat /proc/partitions \\xA0| egrep \\\"($device|major)\\\" > \\\"proc_partitions_${device}_start_at_${part_offset}s.txt\\\"\\n    sync\\n    sleep 1\\n    echo \\\"Executing postmark-quick with partition offset $part_offset:\\\"\\n    postmark postmark-quick.conf | tee -a \\\"postmark-quick_${device}_${part_offset}.txt\\\"\\n\\n    echo \\\"Sleeping 5 seconds...\\\"\\n    sleep 5\\ndone\\n\")), mdx(\"h2\", {\n    \"id\": \"lookup_ip_countrysh\"\n  }, \"lookup_IP_country.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# Example usage:\\n# List countries with which you currently have established TCP connections:\\n# netstat -anp | fgrep ESTABLISHED | awk '{print $5}' | sort | uniq | fgrep -v 127.0.0.1 \\\\\\n# | perl -pe 's/:[^:]+$/\\\\n/;' | xargs -n 1 lookup_IP_country.sh\\n\\nip_addr=$1\\nrev_ip_addr=\\\"$(echo \\\"$ip_addr\\\" | perl -pe 's/^([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})\\\\.([0-9]{1,3})$/$4.$3.$2.$1/;')\\\"\\n# 227.73.63.60.cc.iploc.org descriptive text \\\"CN\\\"\\nhost -t TXT \\\"${rev_ip_addr}.cc.iploc.org\\\" | perl -pe 's/^[0-9.]+\\\\.cc\\\\.iploc\\\\.org descriptive text \\\\\\\"([A-Za-z0-9]+)\\\\\\\"$/$1/;'\\n\")), mdx(\"h2\", {\n    \"id\": \"ss_list_listening_socketssh\"\n  }, \"ss_list_listening_sockets.sh\"), mdx(\"p\", null, \"List listening TCP sockets for selected port numbers:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/bash\\n# Example usage:\\n# ss_list_listening_sockets.sh 22 80 443 8089\\n\\nfilter=''\\n\\nwhile (($#)); do\\n    if [ $notfirst ]; then\\n        filter=\\\"$filter or\\\"\\n    fi\\n    filter=\\\"$filter sport = $1\\\"\\n    notfirst=1\\n    shift\\ndone\\n\\necho \\\"FILTER: $filter\\\"\\n\\nss -tlnup \\\"$filter\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"timed-run-err\"\n  }, \"timed-run-err\"), mdx(\"p\", null, \"Expect\\u2019s timed-run example script forks a command and if it does not complete in a given time, kills it.\"), mdx(\"p\", null, \"This variant of the timed-run example script exists with an error code when timeout occurs:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\n# \\\\\\nexec expect -f \\\"$0\\\" ${1+\\\"$@\\\"}\\n# run a program for a given amount of time\\n# i.e. time 20 long_running_program\\n\\nset timeout [lindex $argv 0]\\neval spawn [lrange $argv 1 end]\\nexpect {\\n    timeout \\xA0{\\n     \\xA0 \\xA0exit 1\\n    }\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"ctags_php\"\n  }, \"ctags_php\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"ctags -R --langmap=php:+.inc *\\n\")), mdx(\"h2\", {\n    \"id\": \"minimaldesktop\"\n  }, \"Minimal.desktop\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[Desktop Entry]\\nType=Application\\nName=ArgoUML\\nExec=/var/soft/argouml/argouml.sh\\nIcon=/var/soft/argouml/icon/ArgoIcon512x512.png\\n\")), mdx(\"h2\", {\n    \"id\": \"node-reformat_jsonjs\"\n  }, \"node-reformat_JSON.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/node\\nvar fs = require('fs');\\nvar input = fs.readFileSync('/dev/stdin').toString();\\nconsole.log(JSON.stringify(JSON.parse(input), null, 2));\\n\")), mdx(\"h2\", {\n    \"id\": \"xml-starlet\"\n  }, \"XML Starlet\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Extract module identifier (groupId:artifactId) from a pom.xml file using XMLStarlet (note that the maven namespace must be assigned to a prefix):\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"    xml sel -N 'm=http://maven.apache.org/POM/4.0.0' -t -c '/m:project/m:groupId/text()' -c 'string(\\\":\\\")' \\\\\\\\\\n      -c '/m:project/m:artifactId/text()' pom.xml\\n\")), mdx(\"h2\", {\n    \"id\": \"screentitlesh\"\n  }, \"screentitle.sh\"), mdx(\"p\", null, \"GNU Screen - set titles for all current and future windows of the current screen session:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nnewtitle=$1\\nscreen -X eval \\\"at \\\\\\\\\\\\# title $newtitle\\\" \\\"shelltitle $newtitle\\\" \\\"hardstatus string $newtitle\\\"\\n\")), mdx(\"h2\", {\n    \"id\": \"screenfitallsh\"\n  }, \"screenfitall.sh\"), mdx(\"p\", null, \"GNU Screen - fit all windows of the current session to current terminal size (e.g. after resizes):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nscreen -X eval \\\"at \\\\\\\\# fit\\\"\\n\")), mdx(\"p\", null, \"Note that the same can be achieved interactively within a screen session by hitting:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CTRL-a, :\")), mdx(\"p\", null, \"then typing the screen command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"at \\\\# fit\\n\")), mdx(\"h2\", {\n    \"id\": \"randbetweensh\"\n  }, \"randbetween.sh\"), mdx(\"p\", null, \"Generate a random integer number between two values (not less than 0 and not greater than 32767)\"), mdx(\"p\", null, \" \\\\\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#!/bin/bash \\\\\\necho $(( ( RANDOM % ($2 - $1 + 1 ) ) + $1 )); \\\\\\n\")), mdx(\"h2\", {\n    \"id\": \"ps_backtracesh\"\n  }, \"ps_backtrace.sh\"), mdx(\"p\", null, \"get a ps process listing for the current process and all its ancestors up to init\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/bash\\n\\nif [ $# -lt 1 ]; then\\n  echo \\\"Usage: $0 PID\\\" > /dev/stderr\\n  exit 1\\nfi\\n\\ndeclare -i pid=$1;\\nppid=0;\\nheader_modifier=\\\"\\\";\\nwhile : ; do\\n  if [ $ppid -ne 0 ]; then\\n    header_modifier=h;\\n  fi;\\n  ppid=$(ps -o ppid= $pid);\\n  ps uww $header_modifier -p $pid;\\n  if [ $pid -eq 1 ]; then\\n    break;\\n  fi;\\n  pid=$ppid;\\ndone;\\n\")), mdx(\"p\", null, \"Usage:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ ps_backtrace.sh PROCESS_PID\\n\")), mdx(\"p\", null, \"e.g.:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$ ps_backtrace.sh $$\\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\\nolo      3372425  0.0  0.0 108180  3632 pts/23   Ss   11:29   0:00 /bin/bash\\nolo       212112  0.0  0.2 326644 208496 ?       Ss   Jan27   0:15 SCREEN -S www\\nolo       212111  0.0  0.0 118996   980 pts/13   S+   Jan27   0:04 screen -S www\\nolo        14054  0.0  0.0 107868  3200 pts/13   Ss   Jan27   0:00 -bash\\n...\\nroot           1  0.0  0.0  19280   944 ?        Ss    2014   6:44 /sbin/init\\n\")), mdx(\"h2\", {\n    \"id\": \"ps_descendantssh\"\n  }, \"ps_descendants.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\npstree -p $1 | perl -ne 'while (/\\\\((\\\\d+)\\\\)/g) { print \\\"$sep$1\\\"; $sep=\\\",\\\" }'\\n\")), mdx(\"h2\", {\n    \"id\": \"ps_blocked_processessh\"\n  }, \"ps_blocked_processes.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nps axr\\n\")), mdx(\"h2\", {\n    \"id\": \"pid_listening_on_tcp_portsh\"\n  }, \"pid_listening_on_tcp_port.sh\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/bin/sh\\nport=$1\\nlsof -i TCP:$port\\n\")), mdx(\"h2\", {\n    \"id\": \"regexp_optimizerpl\"\n  }, \"regexp_optimizer.pl\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"#!/usr/bin/perl\\nuse Regexp::Optimizer;\\n$big_re = \\\"\\\";\\n$first = 1;\\nwhile ($_ = <>) {\\n  chomp $_;\\n  if (!$first) {\\n    $big_re .= \\\"|\\\"\\n  }\\n  $first = 0;\\n  $big_re .= $_;\\n}\\nprint Regexp::Optimizer->new->optimize(qr/$big_re/);\\nprint \\\"\\\\n\\\";\\n\")), mdx(\"h1\", {\n    \"id\": \"microsoft-windows\"\n  }, \"Microsoft Windows\"), mdx(\"p\", null, \"PowerShell, DOS batch etc.\"), mdx(\"h2\", {\n    \"id\": \"powershell\"\n  }, \"PowerShell\"), mdx(\"h3\", {\n    \"id\": \"list-certificates-and-their-fingerprints\"\n  }, \"List certificates and their fingerprints\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"gci cert:\\\\CurrentUser\\\\My\\n\")), mdx(\"p\", null, \"Additionally, display their expiration dates (the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NotAfter\"), \" property):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"gci -recurse cert:\\\\CurrentUser\\\\My | ft -wrap -Property Thumbprint,Issuer,Subject,NotAfter\\n\")), mdx(\"h3\", {\n    \"id\": \"show-private-key-info-for-certificate-given-by-fingerprint\"\n  }, \"Show private key info for certificate given by fingerprint\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(gci cert:\\\\CurrentUser\\\\My | ? {$_.thumbprint -like \\\"FINGERPRINT_HEX\\\"}).PrivateKey\\n\")), mdx(\"p\", null, \"CSP private key\\u2019s container info:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(gci cert:\\\\CurrentUser\\\\My | ? {$_.thumbprint -like \\\"FINGERPRINT_HEX\\\"}) | ForEach-Object {$_.PrivateKey.CspKeyContainerInfo}\\n\")), mdx(\"p\", null, \"For RSA keys, the property UniqueKeyContainerName points to file name in  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData) + \\\"\\\\Microsoft\\\\Crypto\\\\RSA\\\\\\\"\")), mdx(\"p\", null, \"on Windows 7 this typically is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"c:\\\\Users\\\\username\\\\AppData\\\\Roaming\\\\Microsoft\\\\Crypto\\\\RSA\\\\\")), mdx(\"p\", null, \"Locate the file pathname that holds the given certificate\\u2019s RSA Private Key belonging to the current user:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(gci cert:\\\\CurrentUser\\\\My | ? {$_.thumbprint -like \\\"426027FBB6742904212CB813C416F5EF63D8EEAB\\\"}) | `\\n  ForEach-Object { `\\n    [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData) + `\\n    \\\"\\\\Microsoft\\\\Crypto\\\\RSA\\\\\\\" + `\\n    [System.Security.Principal.WindowsIdentity]::GetCurrent().User.Value + \\\"\\\\\\\" + `\\n    $_.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName `\\n  }\\n\")), mdx(\"h3\", {\n    \"id\": \"determine-ldap-dn-for-a-given-active-directory-user\"\n  }, \"Determine LDAP DN for a given Active Directory user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$login_ad = 'LOGIN_AD';\\n$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]''); $searcher.Filter = \\\"(&(objectClass=user)(samaccountname=$login_ad))\\\"; $adfind = $searcher.FindAll(); $adfind[0].Properties.adspath\\n\")), mdx(\"h3\", {\n    \"id\": \"addupdate-thumbnail-photo-in-ad-for-a-given-user\"\n  }, \"Add/update thumbnail photo in AD for a given user\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$login_ad = \\\"aadamowski\\\";\\n$photo_path = \\\"C:\\\\temp\\\\foto.jpg\\\";\\n\\n$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'');\\n$searcher.Filter = \\\"(&(objectClass=user)(samaccountname=$login_ad))\\\";\\n$adfind = $searcher.FindAll();\\n$user=[adsi]$adfind[0].Path;\\n$photo = [byte[]](Get-Content $photo_path -Encoding byte)\\n$user.Properties[\\\"thumbnailphoto\\\"].clear()\\n$user.Properties[\\\"thumbnailphoto\\\"].add($photo)\\n$user.CommitChanges()\\n\")), mdx(\"h3\", {\n    \"id\": \"dump-thumbnail-photos-from-ad-to-files\"\n  }, \"Dump thumbnail photos from AD to files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'');\\n$searcher.Filter = \\\"(ANY LDAP FILTER)\\\"\\n$adfind = $searcher.FindAll();\\nforeach ($user in $adfind) { if ($user.Properties['thumbnailphoto']) { $thumbnailphoto = $user.Properties['thumbnailphoto'].Item(0); $uid = $user.Properties['samaccountname']; [System.IO.File]::WriteAllBytes(\\\"C:\\\\temp\\\\photos\\\\$uid.jpg\\\", $thumbnailphoto); } }\\n\")), mdx(\"h3\", {\n    \"id\": \"convert-a-file--active-directory-timestamp-to-datetime\"\n  }, \"Convert a file / Active Directory timestamp to Date/Time:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$timestamp=129699324000000000\\n[System.DateTime]::FromFileTime($timestamp)\\n\")), mdx(\"h3\", {\n    \"id\": \"override-locale-for-given-command\"\n  }, \"Override locale for given command:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[threading.thread]::currentThread.currentCulture = 'en-US'; [System.DateTime]::FromFileTime($timestamp)\\n\")), mdx(\"p\", null, \"Doing it within a single line is crucial!\"), mdx(\"h3\", {\n    \"id\": \"list-an-ad-groups-members\"\n  }, \"List an AD group\\u2019s members\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$groupName = 'GROUP_NAME'\\n$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'');\\n$searcher.Filter = \\\"(&(objectclass=group)(cn=$groupName))\\\"\\n$adfind = $searcher.FindAll();\\nforeach ($group in $adfind) {\\\"============\\\"; $group.Properties['cn']; \\\"------------\\\"; $group.Properties['member']}\\n\")), mdx(\"h3\", {\n    \"id\": \"find-an-ad-user-by-his-mobile-number\"\n  }, \"Find an AD user by his mobile number\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"WARNING: slow and taxing for the AD server (due to complex, wildcarded search filter\\u2019s pattern)!\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"$mobileNumberSearchPattern=*666*777*888*\\n$searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]'');\\n$searcher.Filter = \\\"(mobile=$mobileNumberSearchPattern)\\\";\\n$adfind = $searcher.FindAll();\\n$adfind[0].Properties;\\n\")), mdx(\"h1\", {\n    \"id\": \"javascript\"\n  }, \"JavaScript\"), mdx(\"h2\", {\n    \"id\": \"speed-up-all-videos-on-page\"\n  }, \"Speed up all videos on page\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[...document.querySelectorAll('video')].forEach(v => v.playbackRate = 1.5)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#posix-systems","title":"POSIX systems","items":[{"url":"#bash-aliases","title":"Bash aliases"},{"url":"#epoch-timestamp-to-current-date","title":"Epoch timestamp to current date"},{"url":"#exposing-shells-on-the-network","title":"Exposing shells on the network"},{"url":"#openssl","title":"OpenSSL","items":[{"url":"#ssl_check_expiry_datesh","title":"ssl_check_expiry_date.sh"},{"url":"#tls_smtp_check_expiry_datesh","title":"tls_smtp_check_expiry_date.sh"},{"url":"#ssl_warn_expiry_datesh","title":"ssl_warn_expiry_date.sh"},{"url":"#use-s_client-with-sni","title":"Use s_client with SNI"},{"url":"#verify_aster_efakturash","title":"verify_aster_eFaktura.sh"},{"url":"#convert-x509-certificate-to-csr","title":"Convert x.509 certificate to CSR"},{"url":"#reflow_pempl","title":"reflow_PEM.pl"},{"url":"#ssl-redirectpl","title":"ssl-redirect.pl"},{"url":"#ssl_clientsh","title":"ssl_client.sh"},{"url":"#tls_smtp_clientsh","title":"tls_smtp_client.sh"}]},{"url":"#openssl_cat_pkcs12","title":"openssl_cat_PKCS12"},{"url":"#hexdump2asn1parsesh","title":"hexdump2asn1parse.sh"},{"url":"#git","title":"GIT","items":[{"url":"#git-relative-diff-alias","title":"Git relative diff alias"},{"url":"#list-branches-and-remote-upstreams-they-track","title":"List branches and remote upstreams they track"},{"url":"#sum-blob-sizes-introduced-by-commit","title":"Sum blob sizes introduced by commit"},{"url":"#sort-branches-by-last-commit-timestamp","title":"Sort branches by last commit timestamp"}]},{"url":"#mercurial","title":"Mercurial","items":[{"url":"#hg_log_raw_messagessh","title":"hg_log_raw_messages.sh"},{"url":"#hgd","title":"hgd"}]},{"url":"#base64_decpy","title":"base64_dec.py"},{"url":"#base64_encpy","title":"base64_enc.py"},{"url":"#base64_dec","title":"base64_dec"},{"url":"#base64_enc","title":"base64_enc"},{"url":"#quoted_printable_dec","title":"quoted_printable_dec"},{"url":"#quoted_printable_enc","title":"quoted_printable_enc"},{"url":"#all_pair_combinationspy","title":"all_pair_combinations.py"},{"url":"#dusage_in_curdirsh","title":"dusage_in_curdir.sh"},{"url":"#db_dumppl---dump-a-berkeley-db-database","title":"db_dump.pl - dump a Berkeley DB database"},{"url":"#bekap","title":"bekap"},{"url":"#bekap_in_place","title":"bekap_in_place"},{"url":"#httrack-mirror_websitesh","title":"httrack-mirror_website.sh"},{"url":"#check_nippy","title":"check_nip.py"},{"url":"#generate_nippy","title":"generate_nip.py"},{"url":"#check_nrbpy","title":"check_nrb.py"},{"url":"#check_peselpy","title":"check_pesel.py"},{"url":"#generate_peselpy","title":"generate_pesel.py"},{"url":"#check_regonpy","title":"check_regon.py"},{"url":"#luhncalculatorpy","title":"luhnCalculator.py"},{"url":"#luhncheckpy","title":"luhnCheck.py"},{"url":"#chrome_bookmarks-extract_urlspy","title":"chrome_bookmarks-extract_URLs.py"},{"url":"#url_encodepl","title":"url_encode.pl"},{"url":"#url_decodepl","title":"url_decode.pl"},{"url":"#html_escape_with_entitiespl","title":"html_escape_with_entities.pl"},{"url":"#ldap_ssha_makepy","title":"ldap_ssha_make.py"},{"url":"#ldap_ssha_checkpy","title":"ldap_ssha_check.py"},{"url":"#generate_passwords_no_ambiguous_charssh","title":"generate_passwords_no_ambiguous_chars.sh"},{"url":"#soap_digest_checksh","title":"soap_digest_check.sh"},{"url":"#rename_to_randomsh","title":"rename_to_random.sh"},{"url":"#rename_files_for_windows_fastpl","title":"rename_files_for_windows_fast.pl"},{"url":"#rename_files_perl_expressionpl","title":"rename_files_perl_expression.pl"},{"url":"#remove_newline_at_eofpl","title":"remove_newline_at_eof.pl"},{"url":"#reread_partition_table_blockdevsh","title":"reread_partition_table_blockdev.sh"},{"url":"#scsi_rescan_bussh","title":"scsi_rescan_bus.sh"},{"url":"#epoch2timepl","title":"epoch2time.pl"},{"url":"#epoch2timesh","title":"epoch2time.sh"},{"url":"#primessh","title":"primes.sh"},{"url":"#mplayer_play_dvd_iso_image_with_subssh","title":"mplayer_play_DVD_iso_image_with_subs.sh"},{"url":"#keytool_add_ca_certsh","title":"keytool_add_ca_cert.sh"},{"url":"#list-pkcs11-keystore","title":"list PKCS#11 KeyStore"},{"url":"#list-pkcs12-keystore","title":"list PKCS#12 KeyStore"},{"url":"#import-pkcs12-to-jks-keystore","title":"Import PKCS#12 to JKS KeyStore"},{"url":"#python_compilesh","title":"python_compile.sh"},{"url":"#terroristizelisp","title":"terroristize.lisp"},{"url":"#jpegtran_from_jpegexifsh","title":"jpegtran_from_jpegexif.sh"},{"url":"#exif_timestamps_to_file_modtime_in_curdirpy","title":"Exif_timestamps_to_file_modtime_in_curdir.py"},{"url":"#input_rate_notifierpl","title":"input_rate_notifier.pl"},{"url":"#monitor_logfilepl","title":"monitor_logfile.pl"},{"url":"#exec_timeout_killpl","title":"exec_timeout_kill.pl"},{"url":"#ettercap_arp_sniffsh","title":"ettercap_arp_sniff.sh"},{"url":"#amr_to_wavsh","title":"amr_to_wav.sh"},{"url":"#convert_flac_to_mp3_subtreesh","title":"convert_flac_to_mp3_subtree.sh"},{"url":"#ffmpeg_transcode_avi_to_androidsh","title":"ffmpeg_transcode_avi_to_Android.sh"},{"url":"#ldapsearch_get_suffixessh","title":"ldapsearch_get_suffixes.sh"},{"url":"#iconv_utf8_to_ascii_translit","title":"iconv_utf8_to_ascii_translit"},{"url":"#wikiconvpl","title":"wikiconv.pl"},{"url":"#wiki_indent","title":"wiki_indent"},{"url":"#encode_bcdpl","title":"encode_BCD.pl"},{"url":"#jboss_list_jndi","title":"jboss_list_JNDI"},{"url":"#jboss_scp_deploy_and_waitsh","title":"jboss_scp_deploy_and_wait.sh"},{"url":"#sizeof_voidc","title":"sizeof_void.c"},{"url":"#phl_dump_tokensh","title":"phl_dump_token.sh"},{"url":"#phl_object_deletersh","title":"phl_object_deleter.sh"},{"url":"#explode_zipssh","title":"explode_zips.sh"},{"url":"#rename_jpg_based_on_exif_timestampsh","title":"rename_jpg_based_on_exif_timestamp.sh"},{"url":"#do_postmark_testssh","title":"do_postmark_tests.sh"},{"url":"#lookup_ip_countrysh","title":"lookup_IP_country.sh"},{"url":"#ss_list_listening_socketssh","title":"ss_list_listening_sockets.sh"},{"url":"#timed-run-err","title":"timed-run-err"},{"url":"#ctags_php","title":"ctags_php"},{"url":"#minimaldesktop","title":"Minimal.desktop"},{"url":"#node-reformat_jsonjs","title":"node-reformat_JSON.js"},{"url":"#xml-starlet","title":"XML Starlet"},{"url":"#screentitlesh","title":"screentitle.sh"},{"url":"#screenfitallsh","title":"screenfitall.sh"},{"url":"#randbetweensh","title":"randbetween.sh"},{"url":"#ps_backtracesh","title":"ps_backtrace.sh"},{"url":"#ps_descendantssh","title":"ps_descendants.sh"},{"url":"#ps_blocked_processessh","title":"ps_blocked_processes.sh"},{"url":"#pid_listening_on_tcp_portsh","title":"pid_listening_on_tcp_port.sh"},{"url":"#regexp_optimizerpl","title":"regexp_optimizer.pl"}]},{"url":"#microsoft-windows","title":"Microsoft Windows","items":[{"url":"#powershell","title":"PowerShell","items":[{"url":"#list-certificates-and-their-fingerprints","title":"List certificates and their fingerprints"},{"url":"#show-private-key-info-for-certificate-given-by-fingerprint","title":"Show private key info for certificate given by fingerprint"},{"url":"#determine-ldap-dn-for-a-given-active-directory-user","title":"Determine LDAP DN for a given Active Directory user"},{"url":"#addupdate-thumbnail-photo-in-ad-for-a-given-user","title":"Add/update thumbnail photo in AD for a given user"},{"url":"#dump-thumbnail-photos-from-ad-to-files","title":"Dump thumbnail photos from AD to files"},{"url":"#convert-a-file--active-directory-timestamp-to-datetime","title":"Convert a file / Active Directory timestamp to Date/Time:"},{"url":"#override-locale-for-given-command","title":"Override locale for given command:"},{"url":"#list-an-ad-groups-members","title":"List an AD group's members"},{"url":"#find-an-ad-user-by-his-mobile-number","title":"Find an AD user by his mobile number"}]}]},{"url":"#javascript","title":"JavaScript","items":[{"url":"#speed-up-all-videos-on-page","title":"Speed up all videos on page"}]}]}},"site":{"siteMetadata":{"title":"Aleksander Adamowski - Blog"}}},"pageContext":{"id":"f4148686-b92b-5980-b3b8-ee7d7267bdd6","parent":{"name":"useful_scripts","base":"useful_scripts.mdx","relativePath":"linux_stuff/useful_scripts.mdx","sourceInstanceName":"content/notes"},"title":"useful_scripts"}},"staticQueryHashes":["386998304","4198970465"]}